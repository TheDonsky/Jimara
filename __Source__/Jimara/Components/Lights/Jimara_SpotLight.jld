
#pragma jimara_light_descriptor_size 96
#include <Environment/Rendering/Shadows/VarianceShadowMapper/VarianceShadowMapper.glh>
#include <Environment/Rendering/SceneObjects/Lights/Photon.glh>

struct Jimara_SpotLight_Data {
	// Transformation:
	vec3 position;				// Bytes [0 - 12)		Transform::Position();
	vec3 forward;				// Bytes [16 - 28)		Transform::Forward();
	vec3 up;					// Bytes [32 - 44)		Transform::Up();

	// Spotlight shape:
	float range;				// Bytes [44 - 48)		Range();
	float spotThreshold;		// Bytes [48 - 52)		(tan(InnerAngle) / tan(OuterAngle));
	float fadeAngleInvTangent;	// Bytes [52 - 56)		(1.0 / tan(OuterAngle));

	// Shadow map parameters:
	float depthEpsilon;			// Bytes [56 - 60)		Error margin for elleminating shimmering caused by floating point inaccuracies from the depth map.
	uint shadowSamplerId;		// Bytes [60 - 64)		BindlessSamplers::GetFor(shadowTexture).Index();
	
	// Spotlight color and texture:
	vec2 colorTiling;			// Bytes [64 - 72)		TextureTiling();
	vec2 colorOffset;			// Bytes [72 - 80)		TextureOffset();
	vec3 baseColor;				// Bytes [80 - 92)		Color() * Intensity();
	uint colorSamplerId;		// Bytes [92 - 96)		BindlessSamplers::GetFor(Texture()).Index();
};


Photon Jimara_SpotLight_GetSample(in HitPoint hitPoint, in Jimara_SpotLight_Data lightData) {
	vec3 offset = (hitPoint.position - lightData.position);
	
	float depth = dot(offset, lightData.forward);
	if (depth <= 0.0 || depth > lightData.range)
		return Photon(vec3(0.0), vec3(0.0), Photon_Type_Regular);
	float invDepth = 1.0 / depth;

	vec2 orthographicOffset = -vec2(dot(offset, cross(lightData.forward, lightData.up)), dot(offset, lightData.up));
	vec2 projectionOffset = orthographicOffset * (invDepth * lightData.fadeAngleInvTangent);
	float uvMagnitude = length(projectionOffset);
	if (uvMagnitude >= 1.0) 
		return Photon(vec3(0.0), vec3(0.0), Photon_Type_Regular);

	vec2 uv = (projectionOffset * 0.5) + 0.5;
	float relativeDepth = depth / lightData.range;
	
	vec2 varianceColor = texture(jimara_BindlessTextures[nonuniformEXT(lightData.shadowSamplerId)], uv).rg;
	float lightAmount = VSM_GetUpperBound(varianceColor, relativeDepth - lightData.depthEpsilon);
	if (lightAmount <= 0.0001f)
		return Photon(vec3(0.0), vec3(0.0), Photon_Type_Regular);

	vec2 colorUV = (uv * lightData.colorTiling) + lightData.colorOffset;
	vec3 projectedColor = texture(jimara_BindlessTextures[nonuniformEXT(lightData.colorSamplerId)], colorUV).rgb;
	float angleFade = (uvMagnitude <= lightData.spotThreshold) 
		? 1.0 : (1.0f - ((uvMagnitude - lightData.spotThreshold) / (1.0 - lightData.spotThreshold)));
	float distanceFade = (invDepth * mix(invDepth, 0.0f, relativeDepth));
	
	return Photon(
		lightData.position,
		(projectedColor * lightData.baseColor) * (angleFade * distanceFade * lightAmount),
		Photon_Type_Regular);
}

#define Jimara_SpotLight_GetSamples(JSL_hitPoint, JSL_lightData, JSL_recordSample) \
	{ Photon JSL_photon = Jimara_SpotLight_GetSample(JSL_hitPoint, JSL_lightData); JSL_recordSample(JSL_photon); }
