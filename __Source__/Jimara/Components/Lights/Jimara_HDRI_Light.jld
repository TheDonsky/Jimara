
#include <Math/Math.glh>
#include <Environment/Rendering/Algorithms/Random/Jimara_RNG.glh>
#include <Environment/Rendering/SceneObjects/Lights/Photon.glh>
#include <Environment/Rendering/ImageBasedLighting/HDRI.glh>
#pragma jimara_light_descriptor_size 32
struct Jimara_HDRI_Light_Data {
	vec3 color;
	uint irradianceID;
	uint preFilteredMapID;
	uint brdfIntegrationMapID;
	float preFilteredMapMipCount;
};

mat4 Jimara_ViewMatrix();

vec3 Jimara_HDRI_Light_SampleTexture(uint textureID, in const vec3 reflectionDir, float roughness, float numMipLevels, float mipBias) {
	// reflectionDir = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch)):
	const float pitch = asin(reflectionDir.y); // Range: [-PI/2; PI/2]
	const float yaw = acos(normalize(vec2(reflectionDir.x, reflectionDir.z)).x) * (reflectionDir.z >= 0.0 ? 1.0 : -1.0); // Range: [-PI, PI]
	
	// Color:
	const float mip = numMipLevels * roughness + mipBias;
	const vec2 uv = vec2((yaw + PI) * 0.5, 0.5 * PI - pitch) * (1.0 / PI);
	return textureLod(jimara_BindlessTextures[nonuniformEXT(textureID)], uv, mip).rgb;
}

Photon Jimara_HDRI_Light_GetSampleIOR(in HitPoint hitPoint, in Jimara_HDRI_Light_Data lightData) {
	const vec3 color = Jimara_HDRI_SampleTexture(
		jimara_BindlessTextures[nonuniformEXT(lightData.irradianceID)], normalize(hitPoint.normal)).rgb;
	return Photon(
		hitPoint.position + hitPoint.normal,
		lightData.color * color, 
		Photon_Type_DiffuseIrradiance);
}

Photon Jimara_HDRI_Light_GetSpecularSample(in HitPoint hitPoint, in Jimara_HDRI_Light_Data lightData) {
	Jimara_BRDF_IntegrationMapId = lightData.brdfIntegrationMapID;

	const vec3 cameraPosition = inverse(Jimara_ViewMatrix())[3].rgb;
	const vec3 hitDelta = (hitPoint.position - cameraPosition);
	const vec3 normal = normalize(hitPoint.normal);
	const vec3 reflectionDir = normalize(hitDelta - 2.0 * normal * dot(normal, hitDelta));
	
	const float mip = hitPoint.roughness * (lightData.preFilteredMapMipCount - 1.0);
	const vec3 color = Jimara_HDRI_SampleTexture(
		jimara_BindlessTextures[nonuniformEXT(lightData.preFilteredMapID)], reflectionDir, mip).rgb;

	return Photon(
		hitPoint.position + reflectionDir,
		lightData.color * color,
		Photon_Type_SpecularIrradiance);
}

#define Jimara_HDRI_Light_GetSamples(JHDRIL_hitPoint, JHDRIL_lightData, JHDRIL_recordSample) { \
	Photon JHDRIL_photon = Jimara_HDRI_Light_GetSampleIOR(JHDRIL_hitPoint, JHDRIL_lightData); JHDRIL_recordSample(JHDRIL_photon); \
	JHDRIL_photon = Jimara_HDRI_Light_GetSpecularSample(JHDRIL_hitPoint, JHDRIL_lightData); JHDRIL_recordSample(JHDRIL_photon); \
}
