
#include <Environment/Rendering/Shadows/VarianceShadowMapper/VarianceShadowMapper.glh>
#pragma jimara_light_descriptor_size 192

struct Jimara_DirectionalLight_CascadeInfo {
	vec2 lightmapOffset;		// Bytes [0 - 8)	Lightmap UV offset (center (X, Y coordinates) * lightmapSize + 0.5f) in "light space"
	float lightmapSize;			// Bytes [8 - 12)	Lightmap orthographic size
	float lightmapDepth;		// Bytes [12 - 16)	Inversed Z coordinate of the lightmap's view matrix in "light space"
	float inverseFarPlane;		// Bytes [16 - 20)	1.0f / farPlane
	float viewportDistance;		// Bytes [20 - 24)	Maximal distance from viewport, this lightmap will cover
	float blendDistance;		// Bytes [24 - 28)	Blended region size between this cascade and the next one (fade size for the last cascade)
	uint shadowSamplerId;		// Bytes [28 - 32)	Sampler index in the global bindless array
};

struct Jimara_DirectionalLight_Data {
	vec3 up;							// Bytes [0 - 12)	lightRotation.up
	uint textureTiling;					// Bytes [12 - 16)	packHalf2x16(TextureTiling())
	vec3 forward;						// Bytes [16 - 28)	lightRotation.forward
	uint textureOffset;					// Bytes [28 - 32)	packHalf2x16(TextureOffset())
	vec3 viewportForward;				// Bytes [32 - 44)	viewMatrix.forward
	uint numCascadesAndAmbientAmount;	// Bytes [44 - 48)	packHalf2x16(Vector2(ShadowCascadeCount() + 0.5f, ShadowStrength()))
	vec3 color;							// Bytes [48 - 60)	Color() * Intensity()
	uint colorTextureId;				// Bytes [60 - 64)	Color sampler index
	
	Jimara_DirectionalLight_CascadeInfo cascades[4];	// Bytes [64 - 192)
};

bool Jimara_DirectionalLight_GetSample(in HitPoint hitPoint, in Jimara_DirectionalLight_Data lightData, out Photon photon) {
	vec3 lightSpacePosition = vec3(
		dot(hitPoint.position, cross(lightData.up, lightData.forward)),
		-dot(hitPoint.position, lightData.up),
		dot(hitPoint.position, lightData.forward));
	
	float viewportDistance = dot(lightData.viewportForward, hitPoint.position);

	float lightAmount = 1.0;
	float shadowBlendFactor = 1.0;
	vec2 numCascadesAndAmbientAmount = unpackHalf2x16(lightData.numCascadesAndAmbientAmount);
	uint numCascades = uint(numCascadesAndAmbientAmount.x);
	for (uint i = 0; i < numCascades; i++) {
		Jimara_DirectionalLight_CascadeInfo cascade = lightData.cascades[i];
		if (viewportDistance > cascade.viewportDistance) continue;
		
		vec2 uv = lightSpacePosition.xy * cascade.lightmapSize + cascade.lightmapOffset;
		float depth = (lightSpacePosition.z + cascade.lightmapDepth);
		vec2 varianceColor = texture(jimara_BindlessTextures[nonuniformEXT(cascade.shadowSamplerId)], uv).rg;
		float cascadeLightAmount = VSM_GetUpperBound(varianceColor, depth * cascade.inverseFarPlane);
		lightAmount = mix(lightAmount, cascadeLightAmount, shadowBlendFactor);

		float viewportDelta = (cascade.viewportDistance - viewportDistance);
		if (viewportDelta >= cascade.blendDistance) {
			shadowBlendFactor = 0.0;
			break;
		}
		else shadowBlendFactor = 1.0 - (viewportDelta / cascade.blendDistance);
	}
	lightAmount = mix(lightAmount, 1.0, shadowBlendFactor);
	lightAmount = mix(lightAmount, 1.0, numCascadesAndAmbientAmount.y);
	if (lightAmount <= 0.0001) return false;

	vec3 textureColor = texture(
		jimara_BindlessTextures[nonuniformEXT(lightData.colorTextureId)], 
		lightSpacePosition.xy * unpackHalf2x16(lightData.textureTiling) + unpackHalf2x16(lightData.textureOffset)).rgb;

	photon.origin = (hitPoint.position - lightData.forward);
	photon.color = lightData.color * textureColor * lightAmount;
	return true;
}

#define Jimara_DirectionalLight_GetSamples(JDL_hitPoint, JDL_lightData, JDL_recordSample) \
	{ Photon JDL_photon; if (Jimara_DirectionalLight_GetSample(JDL_hitPoint, JDL_lightData, JDL_photon)) JDL_recordSample(JDL_photon); }
