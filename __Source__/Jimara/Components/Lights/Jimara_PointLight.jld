
#pragma jimara_light_descriptor_size 48
#include <Environment/Rendering/Shadows/VarianceShadowMapper/VarianceShadowMapper.glh>
#include <Environment/Rendering/DualParabolicalMapping.glh>

struct Jimara_PointLight_Data {
	// Transform:
	vec3 position;			// Bytes [0 - 12)	Transform::Position();
	
	// Color:
	vec3 color;				// Bytes [16 - 28)	Color() * Intensity();

	// Shadow & Range:
	float inverseRange;		// Bytes [28 - 32)	1.0f / Radius();
	float depthEpsilon;		// Bytes [32 - 36)	Error margin for elleminating shimmering caused by floating point inaccuracies from the depth map.
	float zEpsilon;			// Bytes [36 - 40)	Z-epsilon for shadow sampling.
	uint shadowSamplerId;	// Bytes [40 - 44) 	BindlessSamplers::GetFor(shadowTexture).Index();
							// Pad   [44 - 48)
};

uint Jimara_PointLight_GetSamples(in HitPoint hitPoint, in Jimara_PointLight_Data lightData, out Photon samples[MAX_PER_LIGHT_SAMPLES]) {
	vec3 delta = (hitPoint.position - lightData.position);
	float frontFactor = (delta.z >= 0.0) ? 1.0 : -1.0;
	
	float depth = length(delta);
	float invDepth = (1.0 / depth);
	float relativeDepth = depth * lightData.inverseRange;
	
	vec2 vsmColor = Jimara_SampleDualParabolicalMap(delta, jimara_BindlessTextures[nonuniformEXT(lightData.shadowSamplerId)], lightData.zEpsilon).rg;
	float lightAmount = VSM_GetUpperBound(vsmColor, relativeDepth - lightData.depthEpsilon);
	if (lightAmount <= 0.0001f) return 0;

	float distanceFade = (invDepth * mix(invDepth, 0.0, relativeDepth));
	Photon photon;
	photon.origin = lightData.position;
	photon.color = lightData.color * (distanceFade * lightAmount);
	samples[0] = photon;
	return 1;
}
