
#pragma jimara_light_descriptor_size 48
#include <Environment/Rendering/Shadows/VarianceShadowMapper/VarianceShadowMapper.glh>
#include <Environment/Rendering/SceneObjects/Lights/Photon.glh>
#include <Environment/Rendering/DualParabolicalMapping.glh>

struct Jimara_PointLight_Data {
	// Transform:
	vec3 position;			// Bytes [0 - 12)	Transform::Position();
	
	// Color:
	vec3 color;				// Bytes [16 - 28)	Color() * Intensity();

	// Shadow & Range:
	float inverseRange;		// Bytes [28 - 32)	1.0f / Radius();
	float depthEpsilon;		// Bytes [32 - 36)	Error margin for elleminating shimmering caused by floating point inaccuracies from the depth map.
	float zEpsilon;			// Bytes [36 - 40)	Z-epsilon for shadow sampling.
	uint shadowSamplerId;	// Bytes [40 - 44) 	BindlessSamplers::GetFor(shadowTexture).Index();
	float shadowStrength;	// Bytes [44 - 48)	Multiplier for shadowmap strength
};

Photon Jimara_PointLight_GetSample(in HitPoint hitPoint, in Jimara_PointLight_Data lightData) {
	vec3 delta = (hitPoint.position - lightData.position);
	float frontFactor = (delta.z >= 0.0) ? 1.0 : -1.0;
	
	float depth = length(delta);
	float invDepth = (1.0 / depth);
	float relativeDepth = depth * lightData.inverseRange;
	
	vec2 vsmColor = Jimara_SampleDualParabolicalMap(delta, jimara_BindlessTextures[nonuniformEXT(lightData.shadowSamplerId)], lightData.zEpsilon).rg;
	float lightAmount = mix(1.0, VSM_GetUpperBound(vsmColor, relativeDepth - lightData.depthEpsilon), lightData.shadowStrength);
	if (lightAmount <= 0.0001 || relativeDepth >= 1.0)
		return Photon(vec3(0.0), vec3(0.0), Photon_Type_Regular);

	float distanceFade = (invDepth * mix(invDepth, 0.0, relativeDepth));
	return Photon(
		lightData.position,
		lightData.color * (distanceFade * lightAmount),
		Photon_Type_Regular);
}

#define Jimara_PointLight_GetSamples(JPL_hitPoint, JPL_lightData, JPL_recordSample) \
	{ Photon JPL_photon = Jimara_PointLight_GetSample(JPL_hitPoint, JPL_lightData); JPL_recordSample(JPL_photon); }
