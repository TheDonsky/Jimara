#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#include "ParticleState.glh"
#include "../../../Math/Math.glh"

struct SimulationTaskSettings {
	vec3 position;						// Bytes [0 - 12)
	uint liveParticleCountBufferId;		// Bytes [12 - 16)
	vec3 eulerAngles;					// Bytes [16 - 28)
	uint particleIndirectionBufferId;	// Bytes [28 - 32)
	vec3 scale;							// Bytes [32 - 44)
	uint stateBufferId;					// Bytes [44 - 48)
	uint particleBudget;				// Bytes [48 - 52)
	uint taskThreadCount;				// Bytes [52 - 56)
	uint pad_0, pad1;					// Bytes [56 - 64)
};

layout (set = 0, binding = 0) buffer StateBuffers {
    ParticleState[] state;
} stateBuffers[];

layout (set = 0, binding = 0) buffer IndirectionBuffers {
    uint[] indices;
} indirectionBuffers[];

layout (set = 0, binding = 0) buffer LiveCountBuffers {
    uint[] count;
} liveCountBuffers[];

void SetDefaultValues(in SimulationTaskSettings settings, inout ParticleState state) {
	state.position = state.initialPosition = settings.position;
	state.eulerAngles = state.initialEulerAngles = settings.eulerAngles;
	state.size = state.initialSize = settings.scale;

	state.velocity = state.initialVelocity = vec3(0.0);
	state.remainingLifetime = state.totalLifetime = 1.0;
	state.angularVelocity = state.initialAngularVelocity = vec3(0.0);

	state.uvOffsetX = state.uvOffsetY = 0.0;
	state.uvScaleX = state.uvScaleY = 1.0;

	state.color = state.initialColor = vec4(1.0);
}

void ExecuteSimulationTask(in SimulationTaskSettings settings, uint taskThreadId) {
	const uint liveParticleCount = liveCountBuffers[nonuniformEXT(settings.liveParticleCountBufferId)].count[0];
	const uint particleIndex = liveParticleCount + taskThreadId;
	if (particleIndex >= settings.particleBudget) return;
	const uint indirectParticleId = indirectionBuffers[nonuniformEXT(settings.particleIndirectionBufferId)].indices[particleIndex];
	SetDefaultValues(settings, stateBuffers[nonuniformEXT(settings.stateBufferId)].state[indirectParticleId]);
}

#define COMBINED_SIMULATION_KERNEL_BINDING_SET 1
#define COMBINED_SIMULATION_KERNEL_BINDING 0
#include "../../GraphicsSimulation/CombinedGraphicsSimulationKernel_Body.glh"
