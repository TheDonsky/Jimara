#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#include "../../ParticleState.glh"
#include "../../../../../Math/Math.glh"
#include "../../../../../Graphics/Pipeline/IndirectBuffers.glh"

struct SimulationTaskSettings {
	mat4 baseTransform;					// Bytes [0 - 64)
	mat4 viewTransform;					// Bytes [64 - 128)
	uint particleIndirectionBufferId;	// Bytes [128 - 132)
	uint particleStateBufferId;			// Bytes [132 - 136)
	uint instanceBufferId;				// Bytes [136 - 140)
	uint instanceStartId;				// Bytes [140 - 144)
	uint taskThreadCount;				// Bytes [144 - 148)
	uint liveParticleCountBufferId;		// Bytes [148 - 152)
	uint indirectDrawBufferId;			// Bytes [152 - 156)
	uint indirectCommandIndex;			// Bytes [156 - 160)
};

layout (set = 0, binding = 0) buffer StateBuffers {
    ParticleState[] state;
} stateBuffers[];

layout (set = 0, binding = 0) buffer IndirectionBuffers {
	uint[] indices;
} indirectionBuffers[];

layout (set = 0, binding = 0) buffer LiveCountBuffers {
    uint[] count;
} liveCountBuffers[];

layout (set = 0, binding = 0) buffer ResultBuffers {
    mat4[] pose;
} resultBuffers[];

layout (set = 0, binding = 0) buffer IndirectDrawBuffers {
    Jimara_DrawIndirectCommand[] commands;
} indirectBuffers[];

mat4 GetInstanceTransform(in ParticleState state, in SimulationTaskSettings settings) {
	mat4 rotationAndScale = Jimara_MatrixFromEulerAngles(state.eulerAngles);
	{
		rotationAndScale[0] *= state.size.x;
		rotationAndScale[1] *= state.size.y;
		rotationAndScale[2] *= state.size.z;
		rotationAndScale[3] = vec4(0.0, 0.0, 0.0, 1.0);
	}

	mat4 translationMatrix;
	{
		translationMatrix[0] = vec4(1.0, 0.0, 0.0, 0.0);
		translationMatrix[1] = vec4(0.0, 1.0, 0.0, 0.0);
		translationMatrix[2] = vec4(0.0, 0.0, 1.0, 0.0);
		translationMatrix[3] = vec4(state.position, 1.0);
	}

	return settings.baseTransform * translationMatrix * settings.viewTransform * rotationAndScale;
}

mat4 GetInstanceTransform(in SimulationTaskSettings settings, uint particleIndex) {
	const uint indirectParticleId = indirectionBuffers[nonuniformEXT(settings.particleIndirectionBufferId)].indices[particleIndex];
	return GetInstanceTransform(stateBuffers[nonuniformEXT(settings.particleStateBufferId)].state[indirectParticleId], settings);
}

void UpdateIndirectBuffer(in SimulationTaskSettings settings, inout Jimara_DrawIndirectCommand command) {
	command.instanceCount = liveCountBuffers[nonuniformEXT(settings.liveParticleCountBufferId)].count[0];
	command.firstInstance = settings.instanceStartId;
}

void ExecuteSimulationTask(in SimulationTaskSettings settings, uint particleIndex) {
	resultBuffers[nonuniformEXT(settings.instanceBufferId)].pose[settings.instanceStartId + particleIndex] = GetInstanceTransform(settings, particleIndex);
	if (particleIndex == 0) 
		UpdateIndirectBuffer(settings, indirectBuffers[nonuniformEXT(settings.indirectDrawBufferId)].commands[settings.indirectCommandIndex]);
}

#define COMBINED_SIMULATION_KERNEL_BINDING_SET 1
#define COMBINED_SIMULATION_KERNEL_BINDING 0
#include "../../../../GraphicsSimulation/CombinedGraphicsSimulationKernel_Body.glh"
