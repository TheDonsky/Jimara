#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#include "../../ParticleState.glh"
#include "../../../../../Math/Math.glh"
#include "../../../../../Graphics/Pipeline/IndirectBuffers.glh"

struct SimulationTaskSettings {
	mat4 baseTransform;					// Bytes [0 - 64)
	vec3 viewportRight;					// Bytes [64 - 76)
	uint particleIndirectionBufferId;	// Bytes [76 - 80)
	vec3 viewportUp;					// Bytes [80 - 92)
	uint particleStateBufferId;			// Bytes [92 - 96)
	uint instanceBufferId;				// Bytes [96 - 100)
	uint instanceStartId;				// Bytes [100 - 104)
	uint taskThreadCount;				// Bytes [104 - 108)
	uint liveParticleCountBufferId;		// Bytes [108 - 112)
	uint indirectDrawBufferId;			// Bytes [112 - 116)
	uint indirectCommandIndex;			// Bytes [116 - 120)
	uint independentParticleRotation;	// Bytes [120 - 124)
};

struct ParticleInstanceData {
	mat4 transform;
	vec4 color;
	vec4 tilingAndOffset;
	uint objectIndex;
	uint padA, padB, padC;
};

layout (set = 0, binding = 0) buffer StateBuffers {
    ParticleState[] state;
} stateBuffers[];

layout (set = 0, binding = 0) buffer IndirectionBuffers {
	uint[] indices;
} indirectionBuffers[];

layout (set = 0, binding = 0) buffer LiveCountBuffers {
    uint[] count;
} liveCountBuffers[];

layout (set = 0, binding = 0) buffer ResultBuffers {
    ParticleInstanceData[] instanceData;
} resultBuffers[];

layout (set = 0, binding = 0) buffer IndirectDrawBuffers {
    Jimara_DrawIndirectCommand[] commands;
} indirectBuffers[];

mat4 GetInstanceTransform(in ParticleState state, in SimulationTaskSettings settings) {
	mat4 rotationAndScale = Jimara_MatrixFromEulerAngles(state.eulerAngles);
	{
		rotationAndScale[0] *= state.size.x;
		rotationAndScale[1] *= state.size.y;
		rotationAndScale[2] *= state.size.z;
	}

	mat4 translationMatrix;
	{
		translationMatrix[0] = vec4(1.0, 0.0, 0.0, 0.0);
		translationMatrix[1] = vec4(0.0, 1.0, 0.0, 0.0);
		translationMatrix[2] = vec4(0.0, 0.0, 1.0, 0.0);
		translationMatrix[3] = vec4(state.position, 1.0);
	}

	mat4 viewportTransform;
	{
		viewportTransform[0] = vec4(settings.viewportRight, 0.0);
		viewportTransform[1] = vec4(settings.viewportUp, 0.0);
		viewportTransform[2] = vec4(cross(settings.viewportRight, settings.viewportUp), 0.0);
		viewportTransform[3] = vec4(0.0, 0.0, 0.0, 1.0);
	}

	const mat4 particleMatrix = translationMatrix * viewportTransform * rotationAndScale;
	if (settings.independentParticleRotation != 0) {
		mat4 finalMatrix;
		finalMatrix[0] = particleMatrix[0] * length(settings.baseTransform[0].xyz);
		finalMatrix[1] = particleMatrix[1] * length(settings.baseTransform[1].xyz);
		finalMatrix[2] = particleMatrix[2] * length(settings.baseTransform[2].xyz);
		finalMatrix[3] = vec4((settings.baseTransform * particleMatrix[3]).xyz, 1.0);
		return finalMatrix;
	}
	else return settings.baseTransform * particleMatrix;
}

void UpdateInstanceData(in SimulationTaskSettings settings, uint particleIndex, inout ParticleInstanceData instanceData) {
	const uint indirectParticleId = indirectionBuffers[nonuniformEXT(settings.particleIndirectionBufferId)].indices[particleIndex];
	const ParticleState state = stateBuffers[nonuniformEXT(settings.particleStateBufferId)].state[indirectParticleId];
	instanceData.transform = GetInstanceTransform(state, settings);
	instanceData.color = state.color;
	instanceData.tilingAndOffset = vec4(state.uvScaleX, state.uvScaleY, state.uvOffsetX, state.uvOffsetY);
	instanceData.objectIndex = settings.indirectCommandIndex;
}

void UpdateIndirectBuffer(in SimulationTaskSettings settings, inout Jimara_DrawIndirectCommand command) {
	command.instanceCount = liveCountBuffers[nonuniformEXT(settings.liveParticleCountBufferId)].count[0];
	command.firstInstance = settings.instanceStartId;
}

void ExecuteSimulationTask(in SimulationTaskSettings settings, uint particleIndex) {
	UpdateInstanceData(settings, particleIndex, resultBuffers[nonuniformEXT(settings.instanceBufferId)].instanceData[settings.instanceStartId + particleIndex]);
	if (particleIndex == 0) 
		UpdateIndirectBuffer(settings, indirectBuffers[nonuniformEXT(settings.indirectDrawBufferId)].commands[settings.indirectCommandIndex]);
}

#define COMBINED_SIMULATION_KERNEL_BINDING_SET 1
#define COMBINED_SIMULATION_KERNEL_BINDING 0
#include "../../../../GraphicsSimulation/CombinedGraphicsSimulationKernel_Body.glh"
