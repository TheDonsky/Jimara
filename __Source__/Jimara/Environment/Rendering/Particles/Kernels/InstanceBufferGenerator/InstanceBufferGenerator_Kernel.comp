#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#include "../../ParticleState.glh"
#include "../../../../../Math/Math.glh"

struct ParticleTaskSettings {
	uint particleStateBufferId;		// Bytes [0 - 4)
	uint instanceBufferId;			// Bytes [0 - 8)
	uint instanceStartId;			// Bytes [0 - 12)
	uint particleCount;				// Bytes [0 - 16)
	mat4 baseTransform;				// Bytes [16 - 80)
};

layout (set = 0, binding = 0) buffer StateBuffers {
    ParticleState[] state;
} stateBuffers[];

layout (set = 0, binding = 0) buffer ResultBuffers {
    mat4[] pose;
} resultBuffers[];

mat4 GetInstanceTransform(in ParticleState state, in ParticleTaskSettings settings) {
	return settings.baseTransform * Jimara_TransformMatrix(state.position, state.eulerAngles, state.size);
}

void UpdateParticle(in ParticleTaskSettings settings, uint particleIndex) {
	resultBuffers[settings.instanceBufferId].pose[settings.instanceStartId + particleIndex] = 
		GetInstanceTransform(stateBuffers[settings.particleStateBufferId].state[particleIndex], settings);
}

#define COMBINED_PARTICLE_KERNEL_BINDING_SET 1
#define COMBINED_PARTICLE_KERNEL_BINDING 0
#include "../CombinedParticleKernel_Body.glh"
