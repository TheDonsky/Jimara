#ifndef JIMARA_RNG
#define JIMARA_RNG

/// <summary> Pseudo random generator state for XORWOW algorithm </summary>
struct Jimara_RNG_t {
	uint a;         // Bytes [0 - 4)
	uint b;         // Bytes [4 - 8)
	uint c;         // Bytes [8 - 12)
	uint d;         // Bytes [12 - 16)
	uint e;         // Bytes [16 - 20)
	uint counter;   // Bytes [20 - 24)
	uint pad_0;     // Bytes [24 - 28)
	uint pad_1;     // Bytes [28 - 32)
};

/// <summary> Generates a random unsigned integer (Implementation basically copy-pasted from XORWOW Wikipedia entry) </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random unsigned integer </returns>
uint Jimara_RNG_uint(inout Jimara_RNG_t rng) {
	uint t = rng.e;
	uint s = rng.a;
	rng.e = rng.d;
	rng.d = rng.c;
	rng.c = rng.b;
	rng.b = s;
	t ^= t >> 2;
	t ^= t << 1;
	t ^= s ^ (s << 4);
	rng.a = t;
	uint counter = rng.counter + 362437;
	rng.counter += counter;
	return t + counter;
}

/// <summary> Seeds random number generator state </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <param name="seed"> Unique seed value for the rng (has to be unique for each Jimara_RNG_t instance) </param>
void JIMARA_RNG_seed(inout Jimara_RNG_t rng, uint seed) {
	rng.a = seed;
	rng.b = 1;
	rng.c = 2;
	rng.d = 3;
	rng.e = 4;
	for (uint i = 0; i < 8; i++)
		Jimara_RNG_uint(rng); // Scramble a bit...
	rng.counter = 0;
}

/// <summary> Generates a random unsigned integer in given range </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <param name="minimum"> Min value (inclusive) </param>
/// <param name="maximum"> Max value (exclusive) </param>
/// <returns> Random unsigned integer between minimum and maximum </returns>
uint Jimara_RNG_uint(inout Jimara_RNG_t rng, uint minimum, uint maximum) {
	return Jimara_RNG_uint(rng) % (maximum - minimum) + minimum;
}

/// <summary> Generates a random signed integer </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random integer </returns>
int Jimara_RNG_int(inout Jimara_RNG_t rng) {
	return int(Jimara_RNG_uint(rng));
}

/// <summary> Generates a random signed integer in given range </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <param name="minimum"> Min value (inclusive) </param>
/// <param name="maximum"> Max value (exclusive) </param>
/// <returns> Random integer between minimum and maximum </returns>
int Jimara_RNG_int(inout Jimara_RNG_t rng, int minimum, int maximum) {
	return Jimara_RNG_int(rng) % (maximum - minimum) + minimum;
}

/// <summary> Generates a random floating point in (0-1) range </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random floating point </returns>
float Jimara_RNG_float(inout Jimara_RNG_t rng) {
	return float(Jimara_RNG_uint(rng)) / float(~uint(0));
}

/// <summary> Generates a random floating point in given range </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <param name="minimum"> Min value </param>
/// <param name="maximum"> Max value </param>
/// <returns> Random floating point between minimum and maximum </returns>
float Jimara_RNG_float(inout Jimara_RNG_t rng, float minimum, float maximum) {
	return Jimara_RNG_float(rng) * (maximum - minimum) + minimum;
}

/// <summary> Random boolean value </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> true or false with 50:50 chance </returns>
bool Jimara_RNG_bool(inout Jimara_RNG_t rng) {
	return (Jimara_RNG_uint(rng) & 1) == 1;
}

/// <summary> Weighted random boolean value </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <param name="chance"> Probability of true result </param>
/// <returns> Random boolean value </returns>
bool Jimara_RNG_bool(inout Jimara_RNG_t rng, float chance) {
	return Jimara_RNG_float(rng) <= chance;
}

/// <summary> Random 2d direction (a point on unit circle) </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random direction </returns>
vec2 Jimara_RNG_PointOnCircle(inout Jimara_RNG_t rng) {
	float theta = (2.0 * 3.14159265359 * Jimara_RNG_float(rng));
	return vec2(cos(theta), sin(theta));
}

/// <summary> Random 2d point inside an unit circle </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random point </returns>
vec2 Jimara_RNG_PointInCircle(inout Jimara_RNG_t rng) {
	return Jimara_RNG_PointOnCircle(rng) * sqrt(Jimara_RNG_float(rng));
}

/// <summary> Random 3d direction (a point on unit sphere) </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random direction </returns>
vec3 Jimara_RNG_PointOnSphere(inout Jimara_RNG_t rng) {
	float theta = (2.0 * 3.14159265359 * Jimara_RNG_float(rng));
	float cosPhi = (1.0 - (2.0 * Jimara_RNG_float(rng)));
	float sinPhi = sqrt(1.0 - (cosPhi * cosPhi));
	return vec3(
		(sinPhi * cos(theta)),
		(sinPhi * sin(theta)),
		cosPhi);
}

/// <summary> Random 3d point inside an unit sphere </summary>
/// <param name="rng"> Random number generator state (keep in mind that no other thread should be using the same RNG object) </param>
/// <returns> Random point </returns>
vec3 Jimara_RNG_PointInSphere(inout Jimara_RNG_t rng) {
	return Jimara_RNG_PointOnSphere(rng) * pow(Jimara_RNG_float(rng), 1.0 / 3.0);
}

#endif
