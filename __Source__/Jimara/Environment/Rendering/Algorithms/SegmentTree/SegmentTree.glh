
#ifndef JIMARA_SEGMENT_TREE_GPU
#define JIMARA_SEGMENT_TREE_GPU

#define Jimara_SegmentTree_IncorporateRange(start, end, listSize, incorporateIndex) { \
	uint Jimara_SegmentTree_LayerStart = 0; \
	uint Jimara_SegmentTree_LayerSize = listSize; \
	uint Jimara_SegmentTree_RangeStart = start; \
	uint Jimara_SegmentTree_RangeEnd = min(end, Jimara_SegmentTree_LayerSize); \
	while (Jimara_SegmentTree_RangeStart < Jimara_SegmentTree_RangeEnd) { \
		if ((Jimara_SegmentTree_RangeStart & 1) != 0) { \
			uint Jimara_SegmentTree_Index = (Jimara_SegmentTree_LayerStart + Jimara_SegmentTree_RangeStart); \
			incorporateIndex(Jimara_SegmentTree_Index); \
			Jimara_SegmentTree_RangeStart++; \
		} \
		if (Jimara_SegmentTree_RangeStart >= Jimara_SegmentTree_RangeEnd) break; \
		if ((Jimara_SegmentTree_RangeEnd & 1) != 0) { \
			uint Jimara_SegmentTree_Index = (Jimara_SegmentTree_LayerStart + Jimara_SegmentTree_RangeEnd - 1); \
			incorporateIndex(Jimara_SegmentTree_Index); \
			Jimara_SegmentTree_RangeEnd--; \
		} \
		Jimara_SegmentTree_LayerStart += Jimara_SegmentTree_LayerSize; \
		Jimara_SegmentTree_LayerSize = (Jimara_SegmentTree_LayerSize + 1) >> 1; \
		Jimara_SegmentTree_RangeStart = (Jimara_SegmentTree_RangeStart + 1) >> 1; \
		Jimara_SegmentTree_RangeEnd = (Jimara_SegmentTree_RangeEnd + 1) >> 1; \
	} \
}

#define Jimara_SegmentTree_IncorporateAsSum(value, list, index) value += list[index]
#define Jimara_SegmentTree_IncorporateAsProduct(value, list, index) value *= list[index]



struct Jimara_SegmentTree_BuildSettings {
	uint layerSize;
	uint layerStart;
};


#define Jimara_SegmentTree_BuildStep(settings, threadIndex, kernelGroupSize) { \
	const uint Jimara_SegmentTree_GroupSize = kernelGroupSize; \
	const uint Jimara_SegmentTree_ThreadId = threadIndex; \
	const uint Jimara_SegmentTree_GroupThreadId = Jimara_SegmentTree_ThreadId & (Jimara_SegmentTree_GroupSize - 1); \
	uint Jimara_SegmentTree_LayerOffset = (Jimara_SegmentTree_ThreadId - Jimara_SegmentTree_GroupThreadId) << 1; \
	Jimara_SegmentTree_BuildSettings Jimara_SegmentTree_Settings = settings; \
	uint Jimara_SegmentTree_GroupLayerSize = min(Jimara_SegmentTree_Settings.layerSize - Jimara_SegmentTree_LayerOffset, Jimara_SegmentTree_GroupSize << 1u); \
	if (Jimara_SegmentTree_GroupLayerSize > 0) \
		while (true) { \
			const uint Jimara_SegmentTree_NextGroupLayerSize = (Jimara_SegmentTree_GroupLayerSize + 1) >> 1; \
			const uint Jimara_SegmentTree_NextLayerSize = (Jimara_SegmentTree_Settings.layerSize + 1) >> 1; \
			const uint Jimara_SegmentTree_NextLayerOffset = (Jimara_SegmentTree_LayerOffset >> 1); \
			if (Jimara_SegmentTree_GroupThreadId < Jimara_SegmentTree_NextGroupLayerSize) { \
				const uint Jimara_SegmentTree_A = Jimara_SegmentTree_Settings.layerStart + Jimara_SegmentTree_LayerOffset + (Jimara_SegmentTree_GroupThreadId << 1); \
				const uint Jimara_SegmentTree_B = Jimara_SegmentTree_A + 1; \
				const uint Jimara_SegmentTree_DST = (Jimara_SegmentTree_Settings.layerStart + Jimara_SegmentTree_Settings.layerSize + Jimara_SegmentTree_NextLayerOffset + Jimara_SegmentTree_GroupThreadId); \
				if (Jimara_SegmentTree_B >= (Jimara_SegmentTree_Settings.layerStart + Jimara_SegmentTree_Settings.layerSize)) \
					Jimara_BuildSegmentTree_CopyElement(Jimara_SegmentTree_A, Jimara_SegmentTree_DST); \
				else Jimara_BuildSegmentTree_PerformOperation(Jimara_SegmentTree_A, Jimara_SegmentTree_B, Jimara_SegmentTree_DST); \
			} \
			if (Jimara_SegmentTree_NextGroupLayerSize <= 1) break; \
			barrier(); \
			memoryBarrierShared(); \
			Jimara_SegmentTree_LayerOffset = Jimara_SegmentTree_NextLayerOffset; \
			Jimara_SegmentTree_GroupLayerSize = Jimara_SegmentTree_NextGroupLayerSize; \
			Jimara_SegmentTree_Settings.layerStart += Jimara_SegmentTree_Settings.layerSize; \
			Jimara_SegmentTree_Settings.layerSize = Jimara_SegmentTree_NextLayerSize; \
		} \
}

#define Jimara_SegmentTree_ImplementSumKernel(settings, data, kernelGroupSize) \
	void Jimara_BuildSegmentTree_CopyElement(uint Jimara_SegmentTree_SrcIndex, uint Jimara_SegmentTree_DstIndex) { \
		data[Jimara_SegmentTree_DstIndex] = data[Jimara_SegmentTree_SrcIndex]; \
	} \
	void Jimara_BuildSegmentTree_PerformOperation(uint Jimara_SegmentTree_IndexA, uint Jimara_SegmentTree_IndexB, uint Jimara_SegmentTree_DstIndex) { \
		data[Jimara_SegmentTree_DstIndex] = data[Jimara_SegmentTree_IndexA] + data[Jimara_SegmentTree_IndexB]; \
	} \
	layout(local_size_x = kernelGroupSize, local_size_y = 1, local_size_z = 1) in; \
	void main() { \
		Jimara_SegmentTree_BuildStep(settings, uint(gl_GlobalInvocationID.x), kernelGroupSize) \
	}

#define Jimara_SegmentTree_ImplementProductKernel(settings, data, kernelGroupSize) \
	void Jimara_BuildSegmentTree_CopyElement(uint Jimara_SegmentTree_SrcIndex, uint Jimara_SegmentTree_DstIndex) { \
		data[Jimara_SegmentTree_DstIndex] = data[Jimara_SegmentTree_SrcIndex]; \
	} \
	void Jimara_BuildSegmentTree_PerformOperation(uint Jimara_SegmentTree_IndexA, uint Jimara_SegmentTree_IndexB, uint Jimara_SegmentTree_DstIndex) { \
		data[Jimara_SegmentTree_DstIndex] = data[Jimara_SegmentTree_IndexA] * data[Jimara_SegmentTree_IndexB]; \
	} \
	layout(local_size_x = kernelGroupSize, local_size_y = 1, local_size_z = 1) in; \
	void main() { \
		Jimara_SegmentTree_BuildStep(settings, uint(gl_GlobalInvocationID.x), kernelGroupSize) \
	}

#endif
