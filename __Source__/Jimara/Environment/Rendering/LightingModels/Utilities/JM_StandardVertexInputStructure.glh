#ifndef JM_STANDARD_VERTEX_INPUT_BUFFER_STRUCTURE_DEFINED
#define JM_STANDARD_VERTEX_INPUT_BUFFER_STRUCTURE_DEFINED

layout(buffer_reference) buffer JM_StandardVertexInput_uint { uint value; };
layout(buffer_reference) buffer JM_StandardVertexInput_vec2 { vec2 value; };
layout(buffer_reference) buffer JM_StandardVertexInput_vec3 { vec3 value; };
layout(buffer_reference) buffer JM_StandardVertexInput_vec4 { vec4 value; };
layout(buffer_reference) buffer JM_StandardVertexInput_mat4 { mat4 value; };

/// <summary>
/// Vertex-input field buffer with frequency bits and stride
/// <para/> Size: 16, alighnment 8.
/// </summary>
struct JM_StandardVertexInputField {
	uint64_t buffId;
	uint perVertexStride;
	uint perInstanceStride;
};

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, calculates buffer memory address of a vertex attribute/field
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> Field value buffer memory address </returns>
uint64_t JM_StandardVertexInputFieldEntry(in const JM_StandardVertexInputField jm_field, uint jm_vertexId, uint jm_instanceId) {
	return jm_field.buffId +
		(jm_vertexId * jm_field.perVertexStride) +
		(jm_instanceId * jm_field.perInstanceStride);
}

/// <summary>
/// All standard vertex input fields
/// <para/> Size: 112, alighnment 8.
/// </summary>
struct JM_StandardVertexInput {
	/// <summary> JM_VertexPosition </summary>
	JM_StandardVertexInputField vertexPosition;
	
	/// <summary> JM_VertexNormal </summary>
	JM_StandardVertexInputField vertexNormal;
	
	/// <summary> JM_VertexUV </summary>
	JM_StandardVertexInputField vertexUV;
	
	/// <summary> JM_VertexColor </summary>
	JM_StandardVertexInputField vertexColor;
	
	/// <summary> JM_ObjectTransform </summary>
	JM_StandardVertexInputField objectTransform;
	
	/// <summary> JM_ObjectTilingAndOffset </summary>
	JM_StandardVertexInputField objectTilingAndOffset;

	/// <summary> JM_ObjectIndex </summary>
	JM_StandardVertexInputField objectIndex;
};

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_VertexPosition
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_VertexPosition </returns>
vec3 JM_GetVertexPosition(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_vec3(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.vertexPosition, jm_vertexId, jm_instanceId))).value;
}

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_VertexNormal
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_VertexNormal </returns>
vec3 JM_GetVertexNormal(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_vec3(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.vertexNormal, jm_vertexId, jm_instanceId))).value;
}

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_VertexUV
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_VertexUV </returns>
vec2 JM_GetVertexUV(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_vec2(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.vertexUV, jm_vertexId, jm_instanceId))).value;
}

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_VertexColor
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_VertexColor </returns>
vec4 JM_GetVertexColor(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_vec4(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.vertexColor, jm_vertexId, jm_instanceId))).value;
}

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_ObjectTransform
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_ObjectTransform </returns>
mat4 JM_GetObjectTransform(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_mat4(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.objectTransform, jm_vertexId, jm_instanceId))).value;
}

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_ObjectTilingAndOffset
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_ObjectTilingAndOffset </returns>
vec4 JM_GetObjectTilingAndOffset(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_vec4(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.objectTilingAndOffset, jm_vertexId, jm_instanceId))).value;
}

/// <summary>
/// Given JM_StandardVertexInputField, vertex index and instance index, retrieves JM_ObjectIndex
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_ObjectIndex </returns>
uint JM_GetObjectIndex(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	return JM_StandardVertexInput_uint(nonuniformEXT(JM_StandardVertexInputFieldEntry(jm_fields.objectIndex, jm_vertexId, jm_instanceId))).value;
}

#ifdef JM_MaterialFlags

#if (JM_MaterialFlags & JM_UseTangents) != 0
#include "../../../../Data/Materials/NormalMap.glh"
#endif

/// <summary>
/// Evaluates standard JM_VertexInput from JM_StandardVertexInputField, vertex index and instance index
/// <para/> Only usable from lit-shader/lighting model code, because of JM_VertexInput definition;
/// <para/> This one is unable to evaluate tangent and bitangent, because there is no information about the other vertices of the triangle; 
/// Use JM_InterpolateStandardVertexInput for more feature-complete implementation.
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vertexId"> Vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <returns> JM_VertexInput </returns>
JM_VertexInput JM_GetStandardVertexInput(in const JM_StandardVertexInput jm_fields, uint jm_vertexId, uint jm_instanceId) {
	JM_VertexInput jm_input;
	jm_input.position = JM_GetVertexPosition(jm_fields, jm_vertexId, jm_instanceId);
	jm_input.normal = JM_GetVertexNormal(jm_fields, jm_vertexId, jm_instanceId);
	jm_input.uv = JM_GetVertexUV(jm_fields, jm_vertexId, jm_instanceId);
	jm_input.transform = JM_GetObjectTransform(jm_fields, jm_vertexId, jm_instanceId);
#if ((JM_MaterialFlags & JM_UseObjectId) != 0)
	jm_input.objectId = JM_GetObjectIndex(jm_fields, jm_vertexId, jm_instanceId);
#endif
#if ((JM_MaterialFlags & JM_UseVertexColor) != 0)
	jm_input.vertexColor = JM_GetVertexColor(jm_fields, jm_vertexId, jm_instanceId);
#endif
#if ((JM_MaterialFlags & JM_UsePerVertexTilingAndOffset) != 0)
	jm_input.tilingAndOffset = JM_GetObjectTilingAndOffset(jm_fields, jm_vertexId, jm_instanceId);
#endif
	return jm_input;
}

/// <summary>
/// Evaluates standard JM_VertexInput for a single point on the triangle
/// from JM_StandardVertexInputField, instance index, alongside index triplet of a triangle and barycentric coordinates of the point
/// <para/> Only usable from lit-shader/lighting model code, because of JM_VertexInput definition;
/// <para/> Every field, including the tangent & bitangent is evaluated.
/// </summary>
/// <param name="jm_field"> Field information </param>
/// <param name="jm_vA"> First vertex index </param>
/// <param name="jm_vB"> Second vertex index </param>
/// <param name="jm_vC"> Third vertex index </param>
/// <param name="jm_instanceId"> Instance index </param>
/// <param name="jm_barycentrics"> Barycentric coordinates on the triangle (weights for Vert-B and Vert-C as X and Y, respectively) </param>
/// <returns> JM_VertexInput </returns>
JM_VertexInput JM_InterpolateStandardVertexInput(
	in const JM_StandardVertexInput jm_fields, 
	uint jm_vA, uint jm_vB, uint jm_vC, uint jm_instanceId, 
	vec2 jm_barycentrics) {
	JM_VertexInput jm_a = JM_GetStandardVertexInput(jm_fields, jm_vA, jm_instanceId);
	JM_VertexInput jm_b = JM_GetStandardVertexInput(jm_fields, jm_vB, jm_instanceId);
	JM_VertexInput jm_c = JM_GetStandardVertexInput(jm_fields, jm_vC, jm_instanceId);
	JM_VertexInput jm_input;
	const float jm_weightA = (1.0 - jm_barycentrics.x - jm_barycentrics.y);
	jm_input.position = jm_a.position * jm_weightA + jm_b.position * jm_barycentrics.x + jm_c.position * jm_barycentrics.y;
	jm_input.normal = normalize(jm_a.normal * jm_weightA + jm_b.normal * jm_barycentrics.x + jm_c.normal * jm_barycentrics.y);
	jm_input.uv = jm_a.uv * jm_weightA + jm_b.uv * jm_barycentrics.x + jm_c.uv * jm_barycentrics.y;
	if (jm_fields.objectTransform.perVertexStride <= 0)
		jm_input.transform = jm_a.transform;
	else jm_input.transform = jm_a.transform * jm_weightA + jm_b.transform * jm_barycentrics.x + jm_c.transform * jm_barycentrics.y;
#if ((JM_MaterialFlags & JM_UseObjectId) != 0)
	jm_input.objectId = jm_a.objectId; // This should be flat....
#endif
#if ((JM_MaterialFlags & JM_UseVertexColor) != 0)
	jm_input.vertexColor = jm_a.vertexColor * jm_weightA + jm_b.vertexColor * jm_barycentrics.x + jm_c.vertexColor * jm_barycentrics.y;
#endif
#if ((JM_MaterialFlags & JM_UsePerVertexTilingAndOffset) != 0)
	jm_input.tilingAndOffset = jm_a.tilingAndOffset * jm_weightA + jm_b.tilingAndOffset * jm_barycentrics.x + jm_c.tilingAndOffset * jm_barycentrics.y;
#endif
#if (JM_MaterialFlags & JM_UseTangents) != 0
	const mat3 jm_tangentTransform = Jimara_CalculateTangentSpaceTransform(
		jm_input.normal, jm_a.position, jm_b.position, jm_c.position, jm_a.uv, jm_b.uv, jm_c.uv);
	jm_input.tangent = jm_tangentTransform[0];
	jm_input.bitangent = jm_tangentTransform[1];
#endif
	return jm_input;
}

#endif // JM_MaterialFlags

#endif // JM_STANDARD_VERTEX_INPUT_BUFFER_STRUCTURE_DEFINED
