
#pragma JM_LightingModelStage Main JM_VertexShader, JM_FragmentShader;

layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) buffer Jimara_ObjectIdRenderer_ViewportBuffer {
	mat4 view;
	mat4 projection;
	mat4 viewPose;
} jimara_ObjectIdRenderer_ViewportBuffer;

layout(set = MODEL_BINDING_SET_ID, binding = (MODEL_BINDING_START_ID + 1)) uniform Jimara_ObjectIdRenderer_ObjectIdBuffer {
	uint objectId;
} jimara_ObjectIdRenderer_ObjectIdBuffer;

mat4 Jimara_ViewMatrix() { 
	return jimara_ObjectIdRenderer_ViewportBuffer.view;
}

mat4 Jimara_ProjectionMatrix() { 
	return jimara_ObjectIdRenderer_ViewportBuffer.projection;
}

mat4 Jimara_CameraTransform() {
	return jimara_ObjectIdRenderer_ViewportBuffer.projection * jimara_ObjectIdRenderer_ViewportBuffer.view;
}

mat4 Jimara_ViewPose() {
	return jimara_ObjectIdRenderer_ViewportBuffer.viewPose;
}


#ifdef Main
#define JM_BasicRaster_RequireObjectIndex
#define JM_BasicRaster_LM_PerformsAdditionalVertexProcessing
#define JM_BasicRaster_LM_BaseLocationSlot 1
#include "../Jimara_BasicRasterLM_Stages.glh"


/** ############################################ VERTEX SHADER: ############################################ */
#if JM_ShaderStage == JM_VertexShader

layout(location = 0) out flat uint ObjectIdRenderer_instanceId;

void JM_BasicRaster_ProcessVertex() {
	ObjectIdRenderer_instanceId = gl_InstanceIndex;
}

vec4 JM_BasicRaster_WorldToClipSpacePosition(in const vec3 position) {
	return Jimara_CameraTransform() * vec4(position, 1.0);
}


/** ############################################ FRAGMENT SHADER: ############################################ */
#elif JM_ShaderStage == JM_FragmentShader

#if (JM_MaterialFlags & JM_CanDiscard) == 0
// For non-discard, early_fragment_tests can be enabled by default
layout(early_fragment_tests) in;
#endif

layout(location = 0) in flat uint ObjectIdRenderer_instanceId;

layout(location = 0) out vec4 ObjectIdRenderer_vertexPosition;
layout(location = 1) out vec4 ObjectIdRenderer_vertexNormal;
layout(location = 2) out vec4 ObjectIdRenderer_vertexNormalColor;
layout(location = 3) out uvec4 ObjectIdRenderer_compoundIndex;

void JM_BasicRaster_RenderFragment(in const JM_FragmentData fragInput, in const JM_MaterialProperties materialProperties) {
	JM_ShadingState shadingState;
	const bool initStatus = JM_Init(fragInput, materialProperties, shadingState);
#if (JM_MaterialFlags & JM_CanDiscard) != 0
	if (!initStatus)
		discard;
#endif

	ObjectIdRenderer_vertexPosition = vec4(fragInput.JM_Position, 1.0);
	ObjectIdRenderer_vertexNormal = vec4(shadingState.normal, 0.0);
	vec3 viewSpaceNormal = (Jimara_ViewMatrix() * vec4(shadingState.normal, 0.0)).xyz;
	ObjectIdRenderer_vertexNormalColor = vec4((viewSpaceNormal.x + 1.0) * 0.5, (viewSpaceNormal.y + 1.0) * 0.5, -viewSpaceNormal.z, 1.0);
	ObjectIdRenderer_compoundIndex = uvec4(
		jimara_ObjectIdRenderer_ObjectIdBuffer.objectId,
		jm_BasicFragmentObjectIndex,
		ObjectIdRenderer_instanceId,
		gl_PrimitiveID);
}
#endif
#else // Main

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

#include <Data/Materials/JLS_ObjectIndex.glh>

// Vertex output:
layout(location = 0) out flat uint ObjectIdRenderer_instanceId;
layout(location = 1) out uint ObjectIdRenderer_JM_objectIndex;
layout(location = 2) out Jimara_FragmentInput ObjectIdRenderer_fragment;

void main() {
	Jimara_FragmentInput fragInput = Jimara_CalculateFragmentInput();
	gl_Position = Jimara_CameraTransform() * vec4(fragInput.position.xyz, 1.0f);
	ObjectIdRenderer_fragment = fragInput;
	ObjectIdRenderer_instanceId = gl_InstanceIndex;
	ObjectIdRenderer_JM_objectIndex = JM_ObjectIndex;
}

#endif

/** ############################################ FRAGMENT SHADER: ############################################ */
#ifdef JIMARA_FRAGMENT_SHADER

#ifdef JIMARA_OPAQUE_LIT_SHADER
// For opaque shaders, early_fragment_tests can be enabled by default
layout(early_fragment_tests) in;
#endif

// Vertex input:
layout(location = 0) in flat uint ObjectIdRenderer_instanceId;
layout(location = 1) in flat uint ObjectIdRenderer_JM_objectIndex;
layout(location = 2) in Jimara_FragmentInput ObjectIdRenderer_fragment;

layout(location = 0) out vec4 ObjectIdRenderer_vertexPosition;
layout(location = 1) out vec4 ObjectIdRenderer_vertexNormal;
layout(location = 2) out vec4 ObjectIdRenderer_vertexNormalColor;
layout(location = 3) out uvec4 ObjectIdRenderer_compoundIndex;

void main() {
	vec3 color = vec3(0.0);
	Jimara_GeometryBuffer gbuffer = Jimara_BuildGeometryBuffer(ObjectIdRenderer_fragment);
	ObjectIdRenderer_vertexPosition = vec4(gbuffer.position.xyz, 1.0);
	ObjectIdRenderer_vertexNormal = vec4(gbuffer.normal.xyz, 0.0);
	vec3 viewSpaceNormal = (Jimara_ViewMatrix() * vec4(gbuffer.normal, 0.0)).xyz;
	ObjectIdRenderer_vertexNormalColor = vec4((viewSpaceNormal.x + 1.0) * 0.5, (viewSpaceNormal.y + 1.0) * 0.5, -viewSpaceNormal.z, 1.0);
	ObjectIdRenderer_compoundIndex = uvec4(
		jimara_ObjectIdRenderer_ObjectIdBuffer.objectId,
		ObjectIdRenderer_JM_objectIndex,
		ObjectIdRenderer_instanceId,
		gl_PrimitiveID);
}
#endif
#endif // Main
