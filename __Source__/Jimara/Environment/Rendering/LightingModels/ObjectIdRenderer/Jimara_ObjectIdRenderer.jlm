
layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) buffer Jimara_ObjectIdRenderer_ViewportBuffer {
	mat4 view;
	mat4 projection;
	mat4 viewPose;
} jimara_ObjectIdRenderer_ViewportBuffer;

layout(set = MODEL_BINDING_SET_ID, binding = (MODEL_BINDING_START_ID + 1)) uniform Jimara_ObjectIdRenderer_ObjectIdBuffer {
	uint objectId;
} jimara_ObjectIdRenderer_ObjectIdBuffer;

mat4 Jimara_ViewMatrix() { 
	return jimara_ObjectIdRenderer_ViewportBuffer.view;
}

mat4 Jimara_ProjectionMatrix() { 
	return jimara_ObjectIdRenderer_ViewportBuffer.projection;
}

mat4 Jimara_CameraTransform() {
	return jimara_ObjectIdRenderer_ViewportBuffer.projection * jimara_ObjectIdRenderer_ViewportBuffer.view;
}

mat4 Jimara_ViewPose() {
	return jimara_ObjectIdRenderer_ViewportBuffer.viewPose;
}

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

#include <Data/Materials/JLS_ObjectIndex.glh>

// Vertex output:
layout(location = 0) out flat uint ObjectIdRenderer_instanceId;
layout(location = 1) out Jimara_FragmentInput ObjectIdRenderer_fragment;

void main() {
	Jimara_FragmentInput fragInput = Jimara_CalculateFragmentInput();
	gl_Position = Jimara_CameraTransform() * vec4(fragInput.position.xyz, 1.0f);
	ObjectIdRenderer_fragment = fragInput;
	ObjectIdRenderer_instanceId = gl_InstanceIndex;
}

#endif

/** ############################################ FRAGMENT SHADER: ############################################ */
#ifdef JIMARA_FRAGMENT_SHADER

#ifdef JIMARA_OPAQUE_LIT_SHADER
// For opaque shaders, early_fragment_tests can be enabled by default
layout(early_fragment_tests) in;
#endif

// Vertex input:
layout(location = 0) in flat uint ObjectIdRenderer_instanceId;
layout(location = 1) in Jimara_FragmentInput ObjectIdRenderer_fragment;

layout(location = 0) out vec4 ObjectIdRenderer_vertexPosition;
layout(location = 1) out vec4 ObjectIdRenderer_vertexNormal;
layout(location = 2) out uint ObjectIdRenderer_objectIndex;
layout(location = 3) out uint ObjectIdRenderer_instanceIndex;
layout(location = 4) out uint ObjectIdRenderer_primitiveIndex;
layout(location = 5) out vec4 ObjectIdRenderer_vertexNormalColor;

void main() {
	vec3 color = vec3(0.0);
	Jimara_GeometryBuffer gbuffer = Jimara_BuildGeometryBuffer(ObjectIdRenderer_fragment);
	ObjectIdRenderer_vertexPosition = vec4(gbuffer.position.xyz, 1.0);
	ObjectIdRenderer_vertexNormal = vec4(gbuffer.normal.xyz, 0.0);
	ObjectIdRenderer_objectIndex = jimara_ObjectIdRenderer_ObjectIdBuffer.objectId;
	ObjectIdRenderer_instanceIndex = ObjectIdRenderer_instanceId;
	ObjectIdRenderer_primitiveIndex = gl_PrimitiveID;
	vec3 viewSpaceNormal = (Jimara_ViewMatrix() * vec4(gbuffer.normal, 0.0)).xyz;
	ObjectIdRenderer_vertexNormalColor = vec4((viewSpaceNormal.x + 1.0) * 0.5, (viewSpaceNormal.y + 1.0) * 0.5, -viewSpaceNormal.z, 1.0);
}
#endif
