#version 450
#define BLOCK_SIZE 256
layout(local_size_x = BLOCK_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform SizeBuffer {
	uint queryCount;
	uint objectCount;
    uint invalidObjectIndex;
} sizeBuffer;

layout(set = 0, binding = 1) uniform sampler2D vertexPositionTex;
layout(set = 0, binding = 2) uniform sampler2D vertexNormalTex;
layout(set = 0, binding = 3) uniform usampler2D compoundIndexTex;

layout(set = 0, binding = 6) buffer QueryBuffer {
    vec2 data[];
} queryBuffer;

struct GPU_Result {
    vec3 objectPosition;
	vec3 objectNormal;
    uint graphicsObjectIndex;
    uint descriptorObjectIndex;
    uint instanceIndex;
    uint primitiveIndex;
};

layout(set = 0, binding = 7) buffer ResultBuffer {
    GPU_Result data[];
} resultBuffer;

void main() {
    uint resultId = gl_GlobalInvocationID.x;
    if (resultId >= sizeBuffer.queryCount) return;
    vec2 pos = queryBuffer.data[resultId];
    GPU_Result result;
    if (pos.x >= 1.0 || pos.y >= 1.0) {
        result.objectPosition = vec3(0.0, 0.0, 0.0);
        result.objectNormal = vec3(0.0, 0.0, 0.0);
        result.graphicsObjectIndex = sizeBuffer.invalidObjectIndex;
        result.descriptorObjectIndex = 0;
        result.instanceIndex = 0;
        result.primitiveIndex = 0;
    }
    else {
        result.objectPosition = texture(vertexPositionTex, pos).rgb;
        result.objectNormal = texture(vertexNormalTex, pos).rgb;
        const uvec4 compoundIndex = texture(compoundIndexTex, pos);
        result.graphicsObjectIndex = compoundIndex.r;
        result.descriptorObjectIndex = compoundIndex.g;
        result.instanceIndex = compoundIndex.b;
        result.primitiveIndex = compoundIndex.a;
    }
    resultBuffer.data[resultId] = result;
}
