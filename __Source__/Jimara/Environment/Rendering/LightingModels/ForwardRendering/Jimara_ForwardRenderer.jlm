
layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) uniform Jimara_ForwardRenderer_ViewportBuffer {
	mat4 view;
	mat4 projection;
} jimara_ForwardRenderer_ViewportBuffer;

mat4 Jimara_ViewMatrix() { 
	return jimara_ForwardRenderer_ViewportBuffer.view;
}

mat4 Jimara_ProjectionMatrix() { 
	return jimara_ForwardRenderer_ViewportBuffer.projection;
}

mat4 Jimara_CameraTransform() {
	return jimara_ForwardRenderer_ViewportBuffer.projection * jimara_ForwardRenderer_ViewportBuffer.view;
}

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex output:
layout(location = 0) out Jimara_FragmentInput ForwardRenderer_fragment;

void main() {
	Jimara_FragmentInput fragInput = Jimara_CalculateFragmentInput();
	gl_Position = Jimara_CameraTransform() * vec4(fragInput.position.xyz, 1.0f);
	ForwardRenderer_fragment = fragInput;
}

#endif

/** ############################################ FRAGMENT SHADER: ############################################ */
#ifdef JIMARA_FRAGMENT_SHADER

// Light type identifiers
layout(std430, set = MODEL_BINDING_SET_ID, binding = (MODEL_BINDING_START_ID + 1)) readonly buffer Jimara_ForwardRenderer_LightTypeIds { 
	uint ids[]; 
} jimara_ForwardRenderer_LightTypeIds;

// Light grid:
#define SCENE_LIGHT_GRID_BINDING_SET MODEL_BINDING_SET_ID
#define SCENE_LIGHT_GRID_BINDING_START_ID (MODEL_BINDING_START_ID + 2)
#include <Environment/Rendering/SceneObjects/Lights/SceneLightGrid.glh>

// Fragment input:
layout(location = 0) in Jimara_FragmentInput ForwardRenderer_fragment;

// Result
layout(location = 0) out vec4 outColor;

void main() {
	Jimara_GeometryBuffer gbuffer = Jimara_BuildGeometryBuffer(ForwardRenderer_fragment);
	HitPoint hit;
	hit.position = gbuffer.position;
	hit.normal = gbuffer.normal;
	
	#define Jimara_ForwardRenderer_IlluminateFragment(lightIndex) { \
		uint typeId = jimara_ForwardRenderer_LightTypeIds.ids[lightIndex]; \
		Photon photons[MAX_PER_LIGHT_SAMPLES]; \
		uint photonCount = Jimara_GetLightSamples(lightIndex, typeId, hit, photons); \
		for (uint i = 0; i < photonCount; i++) \
			Jimara_IlluminateFragment(photons[i], gbuffer); \
	}

	// Picking buckets only using hit.position would result in divergence and some artifacts.
	// For now, we compromise by making sure 2x2 pixel blocks share the same bucket...
	const ivec2 pixelIndex = ivec2(gl_FragCoord.xy);
	const vec3 adjustedPos = hit.position - float(pixelIndex.x & 1) * dFdxFine(hit.position) - float(pixelIndex.y & 1) * dFdyFine(hit.position);
	SceneLightGrid_IterateLightIndices(adjustedPos, Jimara_ForwardRenderer_IlluminateFragment);

	#undef Jimara_ForwardRenderer_IlluminateFragment
	outColor = gbuffer.pixelColor;
}
#endif
