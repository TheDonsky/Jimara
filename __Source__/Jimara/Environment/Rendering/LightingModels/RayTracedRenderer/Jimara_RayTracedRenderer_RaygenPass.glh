
/** _________________________________________________________________________________________________________ */
/** ############################################ RAY-GENERATION: ############################################ */
#pragma JM_LightingModelStage RayGeneration JM_RayGenShader, JM_NoLitShader;
#if RayGeneration

layout(set = MODEL_BINDING_SET_ID, binding = JIMARA_RT_MODEL_BINDING_BASE, rgba32ui) uniform readonly uimage2D JM_RayTracedRenderer_primitiveRecordId;
layout(set = MODEL_BINDING_SET_ID, binding = (JIMARA_RT_MODEL_BINDING_BASE + 1)) uniform writeonly image2D JM_RayTracedRenderer_frameColor;

layout(location = 0) callableDataEXT Jimara_RayTracedRenderer_ShadeFragment_Call_Payload jimara_RayTracedRenderer_ShadeFragment_Call_Payload;

vec2 CalculateRasteredFaceBarycentrics(
	uint objectPrimitiveId, uint objectInstanceId, 
	in const Jimara_RayTracedRenderer_PerObjectData objectData, 
	in const vec2 frameUV) {
	
	// TODO: If we want to support vertex-displacement, this should be susbtituted by a callable.
	
	// Fragment-direction:
	const vec4 viewDir =  jimara_RayTracedRenderer_ViewportBuffer.inverseProjection * vec4(frameUV, 1.0, 1.0);
	const vec3 fragDirection = (viewDir.xyz / viewDir.w);

	// Vertex A in view-space:
	uint vertId = JM_StandardVertexInput_uint(nonuniformEXT(12 * objectPrimitiveId + objectData.indexBufferId)).value;	
	mat4 transform = Jimara_ViewMatrix() * JM_GetObjectTransform(objectData.vertexInput, vertId, objectInstanceId);
	const vec3 vertPosA = (transform * vec4(JM_GetVertexPosition(objectData.vertexInput, vertId, objectInstanceId), 1.0)).xyz;
	
	// Vertex B in view-space:
	vertId = JM_StandardVertexInput_uint(nonuniformEXT(12 * objectPrimitiveId + objectData.indexBufferId + 4)).value;	
	if (objectData.vertexInput.objectTransform.perVertexStride <= 0)
		transform = Jimara_ViewMatrix() * JM_GetObjectTransform(objectData.vertexInput, vertId, objectInstanceId);
	const vec3 vertPosB = (transform * vec4(JM_GetVertexPosition(objectData.vertexInput, vertId, objectInstanceId), 1.0)).xyz;
	
	// Vertex C in view-space:
	vertId = JM_StandardVertexInput_uint(nonuniformEXT(12 * objectPrimitiveId + objectData.indexBufferId + 8)).value;	
	if (objectData.vertexInput.objectTransform.perVertexStride <= 0)
		transform = Jimara_ViewMatrix() * JM_GetObjectTransform(objectData.vertexInput, vertId, objectInstanceId);
	const vec3 vertPosC = (transform * vec4(JM_GetVertexPosition(objectData.vertexInput, vertId, objectInstanceId), 1.0)).xyz;
	
	// Find surface intersectionPoint:
	const vec3 faceNormal = cross(vertPosB - vertPosA, vertPosC - vertPosA);
	const float deltaProjection = dot(vertPosA, faceNormal);
	const float dirProjection = dot(fragDirection, faceNormal);
	if (abs(dirProjection) <= 0.0) 
		return vec2(0.0, 0.0);
	const vec3 hitPoint = fragDirection * (deltaProjection / dirProjection);

	// Calculate barycentrics:
	const vec3 b = vertPosB - vertPosA;
	const vec3 c = vertPosC - vertPosA;
	const vec3 h = hitPoint - vertPosA;
	float bBB = dot(b, b);
	float dBC = dot(b, c);
	float dCC = dot(c, c);
	float dBH = dot(h, b);
	float dCH = dot(h, c);
	float div = bBB * dCC - dBC * dBC;
	if (abs(div) <= 0.0)
		return vec2(0, 0);
	const float mul = (1.0 / div);
	return vec2(
		(dCC * dBH - dBC * dCH) * mul,
		(bBB * dCH - dBC * dBH) * mul);
}

void main() {
	const ivec2 pixelIndex = ivec2(gl_LaunchIDEXT.xy);
	const ivec2 targetSize = ivec2(imageSize(JM_RayTracedRenderer_frameColor));

	//const float frameUV_Start = vec2(pixelIndex) / vec2(targetSize);
	//const float frameUV_End = (vec2(pixelIndex) + 1.0) / vec2(targetSize);

	const uvec4 primitiveRecordId = imageLoad(JM_RayTracedRenderer_primitiveRecordId, pixelIndex);
	const uint objectInstanceId = primitiveRecordId.x;
	const uint objectPrimitiveId = primitiveRecordId.y;
	const uint drawnObjectId = primitiveRecordId.z;

	if (drawnObjectId == ~uint(0))
		return;

	Jimara_RayTracedRenderer_PerObjectData objectData = jimara_RayTracedRenderer_SceneObjectData.objectData[drawnObjectId];

	if (objectData.materialId == JM_RT_FLAG_MATERIAL_NOT_IN_RT_PIPELINE) {
		Jimara_RNG_t rng;
		JIMARA_RNG_seed(rng, objectInstanceId + 1, ~drawnObjectId + 4, objectPrimitiveId + 64, objectInstanceId + 8, drawnObjectId + 32);
		for (uint i = 0; i < 64; i++)
			Jimara_RNG_float(rng);
		vec3 color = vec3(Jimara_RNG_float(rng), Jimara_RNG_float(rng), Jimara_RNG_float(rng));
		imageStore(JM_RayTracedRenderer_frameColor, pixelIndex, vec4(color, 1.0));
		return;
	}

	// __TODO__: We need a way to render edges too..
	if ((objectData.flags & JM_RT_FLAG_EDGES) != 0)
		return;

	vec2 barycentrics = CalculateRasteredFaceBarycentrics(
		objectPrimitiveId, objectInstanceId, objectData, 
		((vec2(pixelIndex) / (vec2(max(targetSize.x, 2), max(targetSize.y, 2)) - vec2(1.0, 1.0))) - vec2(0.5, 0.5)) * vec2(2.0, -2.0));

	//*
	jimara_RayTracedRenderer_ShadeFragment_Call_Payload.fragmentData.barycentrics = barycentrics;
	jimara_RayTracedRenderer_ShadeFragment_Call_Payload.fragmentData.objectPrimitiveId = objectPrimitiveId;
	jimara_RayTracedRenderer_ShadeFragment_Call_Payload.fragmentData.objectInstanceId = objectInstanceId;
	jimara_RayTracedRenderer_ShadeFragment_Call_Payload.fragmentData.drawnObjectId = drawnObjectId;
	jimara_RayTracedRenderer_ShadeFragment_Call_Payload.eyePosition = Jimara_ViewPose()[3].xyz;
	jimara_RayTracedRenderer_ShadeFragment_Call_Payload.fragmentColor = vec4(0.0, 0.0, 0.0, 0.0);
	executeCallableEXT(objectData.materialId, 0);

	imageStore(JM_RayTracedRenderer_frameColor, pixelIndex, jimara_RayTracedRenderer_ShadeFragment_Call_Payload.fragmentColor);
	/*/
	imageStore(JM_RayTracedRenderer_frameColor, pixelIndex, vec4(1.0 - barycentrics.x - barycentrics.y, barycentrics.x, barycentrics.y, 1.0));
	//*/

	// __TODO__: Get back JM_RayTracedRenderer_instanceId, gl_PrimitiveID and Drawn-Object index from JM_RayTracedRenderer_primitiveRecordId;
	// __TODO__: Get back gl_FragCoord from JM_RayTracedRenderer_clipSpacePosition;
	// __TODO__: Based on geometry and projection, restore barycentric coordinates;
	// __TODO__: Find material-id, as well as settings-buffer index based on the Drawn-Object index;
	// __TODO__: Invoke JM_Init callable function that 'simulates' derivatives;
	// __TODO__: Accumulate direct-light;
	// __TODO__: Iterate on bounce samples.... (later)
}
#endif // RayGeneration
