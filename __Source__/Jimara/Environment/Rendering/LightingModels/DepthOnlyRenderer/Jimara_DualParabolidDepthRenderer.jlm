
layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) uniform Jimara_DualParaboloidDepthRenderer_ViewportBuffer {
	vec3 viewOffset;
	float closePlane;
	float farPlane;
	float forward;
} jimara_DualParaboloidDepthRenderer_ViewportBuffer;

mat4 Jimara_ViewMatrix() { 
	return mat4(
		vec4(1.0, 0.0, 0.0, 0.0),
		vec4(0.0, 1.0, 0.0, 0.0),
		vec4(0.0, 0.0, 1.0, 0.0),
		vec4(jimara_DualParaboloidDepthRenderer_ViewportBuffer.viewOffset, 1.0));
}

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex output:
layout(location = 0) out Jimara_FragmentInput Jimara_ParaboloidDepthRenderer_fragment;

void main() {
	Jimara_FragmentInput fragInput = Jimara_CalculateFragmentInput();
	float forward = jimara_DualParaboloidDepthRenderer_ViewportBuffer.forward;

	vec3 position = (fragInput.position + jimara_DualParaboloidDepthRenderer_ViewportBuffer.viewOffset) * vec3(forward, 1.0, forward);
	float depth = length(position);
	float scaleAmount = (1.0 / (position.z + depth));

	// depth = (closePlane * farPlane) / (farPlane + clipSpaceDepth * (closePlane - farPlane)) => 
	// => depth * (farPlane + clipSpaceDepth * (closePlane - farPlane)) = (closePlane * farPlane) =>
	// => clipSpaceDepth = ((closePlane * farPlane) / depth - farPlane) / (closePlane - farPlane);
	
	float closePlane = jimara_DualParaboloidDepthRenderer_ViewportBuffer.closePlane;
	float farPlane = jimara_DualParaboloidDepthRenderer_ViewportBuffer.farPlane;
	float clipSpaceDepth = (farPlane - (closePlane * farPlane) / depth) / (farPlane - closePlane);

	gl_Position = vec4(
		((position.x * scaleAmount) - forward) * 0.5, // This puts 'front' image on left and 'back' image on right
		position.y * scaleAmount,
		clipSpaceDepth,
		1.0);
	Jimara_ParaboloidDepthRenderer_fragment = fragInput;
}

#endif

/** ############################################ FRAGMENT SHADER: ############################################ */
#ifdef JIMARA_FRAGMENT_SHADER

// Fragment input:
layout(location = 0) in Jimara_FragmentInput Jimara_ParaboloidDepthRenderer_fragment;

void main() {
	// Discard, if the position is (potentially) overlapping with the opposite half of the depth map 
	{
		float forward = jimara_DualParaboloidDepthRenderer_ViewportBuffer.forward;
		vec3 position = 
			(Jimara_ParaboloidDepthRenderer_fragment.position + jimara_DualParaboloidDepthRenderer_ViewportBuffer.viewOffset) 
			* vec3(forward, 1.0, forward);
		float depth = length(position);
		if (position.z < (depth * -0.999)) discard;
		float scaleAmount = (1.0 / (position.z + depth));
		vec2 uv = vec2(position.x * scaleAmount, position.y * scaleAmount);
		if ((uv.x * uv.x) >= 1.0 || (uv.y * uv.y) >= 1.0) discard;
	}

	// Run Jimara_BuildGeometryBuffer hust in case, the shader wants to discard itself additionally:
	Jimara_GeometryBuffer gbuffer = Jimara_BuildGeometryBuffer(Jimara_ParaboloidDepthRenderer_fragment);
}
#endif
