
layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) uniform Jimara_DualParaboloidDepthRenderer_ViewportBuffer {
	vec3 viewOffset;
	float closePlane;
	float farPlane;
	float forward;
	float clipEpsilon;
} jimara_DualParaboloidDepthRenderer_ViewportBuffer;

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex output:
layout(location = 0) out vec2 Jimara_ParaboloidDepthRenderer_uv;
layout(location = 1) out Jimara_FragmentInput Jimara_ParaboloidDepthRenderer_fragment;

void main() {
	Jimara_FragmentInput fragInput = Jimara_CalculateFragmentInput();
	float forward = jimara_DualParaboloidDepthRenderer_ViewportBuffer.forward;

	vec3 position = (fragInput.position + jimara_DualParaboloidDepthRenderer_ViewportBuffer.viewOffset) * vec3(forward, 1.0, forward);
	float depth = length(position);
	vec3 direction = position / depth;
	float scaleAmount = (1.0 / (direction.z + 1.0));

	// depth = (closePlane * farPlane) / (farPlane + clipSpaceDepth * (closePlane - farPlane)) => 
	// => depth * (farPlane + clipSpaceDepth * (closePlane - farPlane)) = (closePlane * farPlane) =>
	// => clipSpaceDepth = ((closePlane * farPlane) / depth - farPlane) / (closePlane - farPlane);
	
	float closePlane = jimara_DualParaboloidDepthRenderer_ViewportBuffer.closePlane;
	float farPlane = jimara_DualParaboloidDepthRenderer_ViewportBuffer.farPlane;
	float clipSpaceDepth = (farPlane - (closePlane * farPlane) / depth) / (farPlane - closePlane);

	gl_Position = vec4(
		((direction.x * scaleAmount) - forward) * 0.5f, // This puts 'front' image on left and 'back' image on right
		direction.y * scaleAmount,
		clipSpaceDepth,
		1.0);
	Jimara_ParaboloidDepthRenderer_uv = gl_Position.xy;
	Jimara_ParaboloidDepthRenderer_fragment = fragInput;
}

#endif

/** ############################################ FRAGMENT SHADER: ############################################ */
#ifdef JIMARA_FRAGMENT_SHADER

// Fragment input:
layout(location = 0) in vec2 Jimara_ParaboloidDepthRenderer_uv;
layout(location = 1) in Jimara_FragmentInput Jimara_ParaboloidDepthRenderer_fragment;

void main() {
	float forward = jimara_DualParaboloidDepthRenderer_ViewportBuffer.forward;
	vec2 uvPosition = Jimara_ParaboloidDepthRenderer_uv;

	// Discard if we're on the "wrong side" of the map:
	if ((forward * uvPosition.x) > 0.0) discard;
	
	// Discard if we're rendering stuff behind us:
	{ 
		float fragmentZ = Jimara_ParaboloidDepthRenderer_fragment.position.z;
		float posZ = jimara_DualParaboloidDepthRenderer_ViewportBuffer.viewOffset.z;
		float clipEpsilon = jimara_DualParaboloidDepthRenderer_ViewportBuffer.clipEpsilon;
		if (((fragmentZ + posZ) * forward) < clipEpsilon)
			discard;
	}

	// Run Jimara_BuildGeometryBuffer hust in case, the shader wants to discard itself additionally:
	Jimara_GeometryBuffer gbuffer = Jimara_BuildGeometryBuffer(Jimara_ParaboloidDepthRenderer_fragment);
}
#endif
