
#pragma JM_LightingModelStage Main JM_VertexShader, JM_FragmentShader;

layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) uniform Jimara_UnlitRenderer_ViewportBuffer {
	mat4 view;
	mat4 projection;
	mat4 viewPose;
} jimara_UnlitRenderer_ViewportBuffer;

mat4 Jimara_ViewMatrix() { 
	return jimara_UnlitRenderer_ViewportBuffer.view;
}

mat4 Jimara_ProjectionMatrix() { 
	return jimara_UnlitRenderer_ViewportBuffer.projection;
}

mat4 Jimara_CameraTransform() {
	return jimara_UnlitRenderer_ViewportBuffer.projection * jimara_UnlitRenderer_ViewportBuffer.view;
}

mat4 Jimara_ViewPose() {
	return jimara_UnlitRenderer_ViewportBuffer.viewPose;
}

#include "../Jimara_BasicRasterLM_Stages.glh"


/** ############################################ VERTEX SHADER: ############################################ */
#if JM_ShaderStage == JM_VertexShader
vec4 JM_BasicRaster_WorldToClipSpacePosition(in const vec3 position) {
	return Jimara_CameraTransform() * vec4(position, 1.0);
}


/** ############################################ FRAGMENT SHADER: ############################################ */
#elif JM_ShaderStage == JM_FragmentShader

layout(location = 0) out vec4 outColor;

void JM_BasicRaster_RenderFragment(in const JM_FragmentData fragInput, in const JM_MaterialProperties materialProperties) {
	JM_ShadingState state;
	const bool initStatus = JM_Init(fragInput, materialProperties, state);
#if (JM_MaterialFlags & JM_CanDiscard) != 0
	if (!initStatus)
		discard;
#endif
	outColor = vec4(
		JM_Emission(state, state.normal),
#if JM_BlendMode != JM_Blend_Opaque
		JM_Opacity(state)
#else
		1.0
#endif
	);
}
#endif
