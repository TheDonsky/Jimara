
#ifndef SCENE_LIGHT_GRID_HEADER_INCLUDED
#define SCENE_LIGHT_GRID_HEADER_INCLUDED

/// <summary> 
/// In order to use scene light grid, include this header in your shader
/// after defining SCENE_LIGHT_GRID_BINDING_SET and SCENE_LIGHT_GRID_BINDING_START_ID 
/// for binding set and binding slot start indices. SceneLightGrid will consume bindings 
/// from SCENE_LIGHT_GRID_BINDING_START_ID to generated SCENE_LIGHT_GRID_BINDING_END_ID
/// and fill them in with hard-coded binding names.
/// <para/> 
/// Keep in mind, that there are two types of voxels: Regular ones, for localized light sources,
/// accessed though SceneLightGrid_GetLocalLightIndexRange() call and one unified bucket for 
/// all 'global' lights that should be taken into consideration everywhere, 
/// accessed via SceneLightGrid_GetGlobalLightIndexRange() call.
/// <para/>
/// Use SceneLightGrid_GetLightCount() to get number of lights within a voxel and
/// SceneLightGrid_GetLightIndex() to translate voxel light index to global light index
/// (You can use SceneLightInfo/LightTypeIdBuffer or anything else following the order from ViewportLightSet)
/// <para/>
/// On the source code side, one needs to create/get instance of a SceneLightGrid collection,
/// attach it's bindings to the BindingSet instance and wait for the UpdateJob before it's safe to use in the command buffers.
/// </summary>


/// <summary> Per-voxel data of scene light grid </sumary>
struct SceneLightGrid_VoxelRange {
	uint start;
	uint count;
};

/// <summary> First binding slot after SCENE_LIGHT_GRID_BINDING_START_ID that is not populated by scene light grid's bindings </sumary>
#define SCENE_LIGHT_GRID_BINDING_END_ID (SCENE_LIGHT_GRID_BINDING_START_ID + 4)

/// <summary> Grid settings </sumary>
layout(set = SCENE_LIGHT_GRID_BINDING_SET, binding = SCENE_LIGHT_GRID_BINDING_START_ID) uniform SceneLightGrid_SettingsBuffer {
	vec3 gridOrigin;
	vec3 voxelSize;
	uvec3 voxelGroupCount;
	uvec3 voxelGroupSize;
	uint globalLightCount;
} SceneLightGrid_settingsBuffer;

/// <summary> Voxel group data </sumary>
layout(set = SCENE_LIGHT_GRID_BINDING_SET, binding = (SCENE_LIGHT_GRID_BINDING_START_ID + 1)) buffer readonly SceneLightGrid_VoxelGroupBuffer {
	uint voxels[];
} SceneLightGrid_voxelGroupBuffer;

/// <summary> Voxel data </sumary>
layout(set = SCENE_LIGHT_GRID_BINDING_SET, binding = (SCENE_LIGHT_GRID_BINDING_START_ID + 2)) buffer readonly SceneLightGrid_VoxelBuffer {
	SceneLightGrid_VoxelRange ranges[];
} SceneLightGrid_voxelBuffer;

/// <summary> Light index data, ranges point to </sumary>
layout(set = SCENE_LIGHT_GRID_BINDING_SET, binding = (SCENE_LIGHT_GRID_BINDING_START_ID + 3)) buffer readonly SceneLightGrid_LightIndexBuffer {
	uint indices[];
} SceneLightGrid_lightIndexBuffer;

/// <summary> Gets SceneLightGrid_VoxelRange based on the bucket origin and group-space index (internal use only... Please ignore this one!) </sumary>
SceneLightGrid_VoxelRange SceneLightGrid_GetVoxelRange(uint voxelGroupOrigin, uvec3 groupSpaceIndex) {
	return SceneLightGrid_voxelBuffer.ranges[voxelGroupOrigin + 
		SceneLightGrid_settingsBuffer.voxelGroupSize.x * 
		(SceneLightGrid_settingsBuffer.voxelGroupSize.y * groupSpaceIndex.z + groupSpaceIndex.y) + groupSpaceIndex.x];
}

/// <summary> Iterates over SceneLightGrid_VoxelRange </sumary>
/// <param name="JSLG_range"> SceneLightGrid_VoxelRange </param>
/// <param name="JSLG_reportLightIndex"> A macro/function that will be invoked with light index as the argument </param>
#define SceneLightGrid_IterateVoxelRange(JSLG_range, JSLG_reportLightIndex) { \
	const uint JSLG_end = (JSLG_range.start + JSLG_voxelRange.count); \
	for (uint JSLG_i = JSLG_voxelRange.start; JSLG_i < JSLG_end; JSLG_i++) { \
		const uint JSLG_lightId = SceneLightGrid_lightIndexBuffer.indices[JSLG_i]; \
		JSLG_reportLightIndex(JSLG_lightId); \
	} \
}

/// <summary> 
/// Reports relevant light indices for world-space position 
/// <para/> Note: Implementation has a comparizon 'network' that might seem strange and unnecessary; 
/// The only reason we have it is to force divergence and avoid some artifacts at the edges of the internal voxels.
/// </sumary>
/// <param name="JSLG_position"> World-space position </param>
/// <param name="JSLG_reportLightIndex"> A macro/function that will be invoked with light index as the argument </param>
#define SceneLightGrid_IterateLightIndices(JSLG_position, JSLG_reportLightIndex) { \
	for (uint JSLG_i = 0; JSLG_i < SceneLightGrid_settingsBuffer.globalLightCount; JSLG_i++) { \
		const uint JSLG_lightId = SceneLightGrid_lightIndexBuffer.indices[JSLG_i]; \
		JSLG_reportLightIndex(JSLG_lightId); \
	} \
	const vec3 JSLG_voxelSpacePos = (JSLG_position - SceneLightGrid_settingsBuffer.gridOrigin) / SceneLightGrid_settingsBuffer.voxelSize; \
	if (JSLG_voxelSpacePos.x >= 0.0 && JSLG_voxelSpacePos.y >= 0.0 && JSLG_voxelSpacePos.z >= 0.0) { \
		const uvec3 JSLG_globalVoxelIndex = uvec3(uint(JSLG_voxelSpacePos.x), uint(JSLG_voxelSpacePos.y), uint(JSLG_voxelSpacePos.z)); \
		const uvec3 JSLG_globalGridSize = SceneLightGrid_settingsBuffer.voxelGroupCount * SceneLightGrid_settingsBuffer.voxelGroupSize; \
		if (JSLG_globalVoxelIndex.x < JSLG_globalGridSize.x && JSLG_globalVoxelIndex.y < JSLG_globalGridSize.y && JSLG_globalVoxelIndex.z < JSLG_globalGridSize.z) { \
			const uvec3 JSLG_voxelGroupIndex = JSLG_globalVoxelIndex / SceneLightGrid_settingsBuffer.voxelGroupSize; \
			const uint JSLG_voxelGroupOrigin = SceneLightGrid_voxelGroupBuffer.voxels[ \
				SceneLightGrid_settingsBuffer.voxelGroupCount.x *  \
				(SceneLightGrid_settingsBuffer.voxelGroupCount.y * JSLG_voxelGroupIndex.z + JSLG_voxelGroupIndex.y) + JSLG_voxelGroupIndex.x]; \
			if (JSLG_voxelGroupOrigin < ~uint(0)) { \
				const vec3 JSLG_groupSpacePos = (JSLG_voxelSpacePos - vec3(JSLG_voxelGroupIndex * SceneLightGrid_settingsBuffer.voxelGroupSize)); \
				const SceneLightGrid_VoxelRange JSLG_voxelRange = SceneLightGrid_GetVoxelRange(JSLG_voxelGroupOrigin, uvec3(JSLG_groupSpacePos)); \
				SceneLightGrid_IterateVoxelRange(JSLG_voxelRange, JSLG_reportLightIndex); \
			} \
		} \
	} \
}

#endif
