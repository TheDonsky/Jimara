#version 450
#extension GL_EXT_shader_image_load_formatted: require
#include "../../../../Math/GraphicsCurves.glh"

#define BLOCK_SIZE 16
layout(local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform ReinhardExSettings {
	vec3 iso;
} settings;

layout(set = 0, binding = 1) buffer readonly ResponseCurve {
	Vec3BezierNode[] spline;
} responseCurve;

layout(set = 0, binding = 2) uniform image2D source;
layout(set = 0, binding = 3) uniform image2D result;


void main() {
	const ivec2 coord = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));
	const ivec2 resolution = imageSize(result).xy;
	if (coord.x >= resolution.x || coord.y >= resolution.y) return;
	
	const vec4 sourceColor = imageLoad(source, coord);
	vec3 scaledColor = sourceColor.rgb / settings.iso;

	#define JIMARA_BEZIER_SPLINE responseCurve.spline
	vec3 curveSample = vec3(1.0);
	vec3 resultColor;
	
	Jimara_EvaluateSpline(scaledColor.r, curveSample); 
	resultColor.r = curveSample.r;
	
	Jimara_EvaluateSpline(scaledColor.g, curveSample); 
	resultColor.g = curveSample.g;
	
	Jimara_EvaluateSpline(scaledColor.b, curveSample); 
	resultColor.b = curveSample.b;
	#undef JIMARA_BEZIER_SPLINE

	imageStore(result, coord, vec4(resultColor, sourceColor.a));
}
