#ifndef JIMARA_HDRI_HELPERS_GLH
#define JIMARA_HDRI_HELPERS_GLH
#include "../../../Math/Math.glh"

/// <summary>
/// Calculates HDRI UV coordinates from direction vector
/// </summary>
/// <param name="direction"> 3d direction </param>
vec2 Jimara_HDRI_UV(in vec3 direction) {
	// direction = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch)):
	const float pitch = asin(direction.y); // Range: [-PI/2; PI/2]
	const float yaw = 
		acos(normalize(vec2(direction.x, direction.z)).x) * 
		(direction.z >= 0.0 ? 1.0 : -1.0); // Range: [-PI, PI]
	return vec2((yaw + PI) * 0.5, 0.5 * PI - pitch) * (1.0 / PI);
}

/// <summary>
/// Calculates direction vector from HDRI UV coordinates
/// </summary>
/// <param name="uv"> HDRI UV coordinates </param>
vec3 Jimara_HDRI_Normal(in vec2 uv) {
	// uv.y = (0.5 * PI - pitch) / PI => PI * uv.y = 0.5 * PI - pitch => pitch = 0.5 * PI - PI * uv.y;
	const float pitch = 0.5 * PI - PI * uv.y;

	// yv.x = (yaw + PI) * 0.5 / PI => PI * 2 * uv.x = yaw + PI => yaw = 2 * PI * uv.x - PI;
	const float yaw = 2 * PI * uv.x - PI;

	// Direction:
	const float cosPitch = cos(pitch);
	return vec3(cos(yaw) * cosPitch, sin(pitch), sin(yaw) * cosPitch);
}

/// <summary>
/// Samples HDRI texture
/// </summary>
/// <param name="map"> HDRI map </param>
/// <param name="direction"> 3d direction </param>
vec4 Jimara_HDRI_SampleTexture(nonuniformEXT sampler2D map, in vec3 direction) {
	// direction = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch)):
	const float pitch = asin(direction.y); // Range: [-PI/2; PI/2]
	const float absYaw = acos(normalize(vec2(direction.x, direction.z)).x); // Range: [0, PI]
	
	// UV and color:
	const float scale = (1.0 / PI);
	const float yvY = (0.5 * PI - pitch) * scale;
	const vec4 frontColor = texture(map, vec2((absYaw + PI) * (scale * 0.5), yvY));
	const vec4 backColor = texture(map, vec2((PI - absYaw) * (scale * 0.5), yvY));
	return mix(frontColor, backColor, float(direction.z < 0.0));
}

/// <summary>
/// Samples HDRI texture
/// </summary>
/// <param name="map"> HDRI map </param>
/// <param name="direction"> 3d direction </param>
/// <param name="mip"> Custom mip level </param>
vec4 Jimara_HDRI_SampleTexture(nonuniformEXT sampler2D map, in vec3 direction, float mip) {
	return textureLod(map, Jimara_HDRI_UV(direction), mip);
}

#endif
