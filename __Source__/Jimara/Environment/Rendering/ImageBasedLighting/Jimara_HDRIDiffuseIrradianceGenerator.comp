#version 450
#extension GL_EXT_shader_image_load_formatted: require
#extension GL_EXT_nonuniform_qualifier : enable
#include "HDRI.glh"
#include "IBLGeneratorHelpers.glh"
// Implementation derived from: https://learnopengl.com/PBR/IBL/Diffuse-irradiance

#define BLOCK_SIZE 16
layout(local_size_x = BLOCK_SIZE, local_size_y = BLOCK_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D hdriTexture;
layout(set = 0, binding = 1) uniform image2D irradianceMap;

void main() {
	const ivec2 coord = ivec2(int(gl_GlobalInvocationID.x), int(gl_GlobalInvocationID.y));
	const ivec2 resolution = imageSize(irradianceMap).xy;
	if (coord.x >= resolution.x || coord.y >= resolution.y) return;
	const ivec2 hdriSize = textureSize(hdriTexture, 0);

	const TangentSpace tangents = GetTangentSpace(coord, resolution);

	vec3 irradianceSum = vec3(0.0);

	const float horSamples = 256;
	const float verSamples = 64;
	const float horStep = 2.0 * PI / horSamples;
	const float verStep = 0.5 * PI / verSamples;

	float sinTheta = sin(verStep * 0.5);
	float cosTheta = cos(verStep * 0.5);

	for (float t = 0; t < verSamples; t++) {
		const float nextTheta = (t + 1.5) * verStep;
		const float nextSinTheta = sin(nextTheta);
		const float nextCosTheta = cos(nextTheta);
		const float weight = (cosTheta * sinTheta);
		
		float sinPhi = sin(0.0);
		float cosPhi = cos(0.0);
		for (float p = 0; p < horSamples; p++) {
			const float nextPhi = (p + 1.0) * horStep;
			const float nextSinPhi = sin(nextPhi);
			const float nextCosPhi = cos(nextPhi);

			// Tangent-space coordinate and UV:
			const vec3 tangentSample = vec3(sinTheta * cosPhi, cosTheta, sinTheta * sinPhi);
			const vec2 sampleUV = Jimara_HDRI_UV(GetWorldSpacePos(tangents, tangentSample));

			// We do not have derivatives in compute shader for auto-mip, so we do it manually here:
			const vec3 nextTangentSample = vec3(nextSinTheta * nextCosPhi, nextCosTheta, nextSinTheta * nextSinPhi);
			const vec2 nextSampleUV = Jimara_HDRI_UV(GetWorldSpacePos(tangents, nextTangentSample));
			const float mip = CalculateMipLevel(sampleUV, nextSampleUV, hdriSize);

			// Add sample:
			irradianceSum += textureLod(hdriTexture, sampleUV, mip).rgb * weight;

			// Update sin & cos:
			sinPhi = nextSinPhi;
			cosPhi = nextCosPhi;
		}

		sinTheta = nextSinTheta;
		cosTheta = nextCosTheta;
	}

	imageStore(irradianceMap, coord, vec4(irradianceSum / (horSamples * verSamples), 1.0));
}
