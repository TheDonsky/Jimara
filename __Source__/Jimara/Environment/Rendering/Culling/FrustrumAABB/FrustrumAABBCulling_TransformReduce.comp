#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#include "FrustrumAABBCulling_SimulationTaskSettings.glh"
#include "../../Algorithms/SegmentTree/SegmentTree.glh"

uint Jimara_CombinedGraphicsSimulationKernel_ThreadCount();

uint EvaluateSegmentTreeRange(uint start, uint end) {
	const uint totalThreadCount = Jimara_CombinedGraphicsSimulationKernel_ThreadCount();
	uint value = 0;
	#define Jimara_SegmentTree_IncorporateFn(index) value += segmentTreeBuffer.values[index];
	Jimara_SegmentTree_IncorporateRange(start, end, totalThreadCount, Jimara_SegmentTree_IncorporateFn)
	#undef Jimara_SegmentTree_IncorporateFn
	return value;
}

void ExecuteSimulationTask(in SimulationTaskSettings settings, uint transformIndex) {
	const bool isNotCulled = segmentTreeBuffer.values[gl_GlobalInvocationID.x] != 0;
	const uint transformBase = gl_GlobalInvocationID.x - transformIndex;
	if (isNotCulled) {
		const uint visibleBeforeThis = EvaluateSegmentTreeRange(transformBase, gl_GlobalInvocationID.x);
		FC_TransferCulledData(settings, transformIndex, visibleBeforeThis);
	}
	if (transformIndex == 0)
		FC_Count(settings) = EvaluateSegmentTreeRange(transformBase, transformBase + settings.taskThreadCount);
}

#define COMBINED_SIMULATION_KERNEL_BINDING_SET 1
#define COMBINED_SIMULATION_KERNEL_BINDING 1
#include "../../../GraphicsSimulation/CombinedGraphicsSimulationKernel_Body.glh"
