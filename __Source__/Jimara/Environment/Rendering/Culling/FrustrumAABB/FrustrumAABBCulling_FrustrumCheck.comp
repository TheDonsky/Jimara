#version 450
#extension GL_EXT_nonuniform_qualifier : enable

#include "FrustrumAABBCulling_SimulationTaskSettings.glh"

vec3 ToClipSpace(in mat4 frustrumTransform, in vec3 pos) {
	const vec4 p = frustrumTransform * vec4(pos, 1.0);
	const float scale = 1.0 / abs(p.w);
	return p.xyz * scale;
}

void ExpandBBox(inout vec3 boxMin, inout vec3 boxMax, in vec3 pos) {
	boxMin = vec3(min(boxMin.x, pos.x), min(boxMin.y, pos.y), min(boxMin.z, pos.z));
	boxMax = vec3(max(boxMax.x, pos.x), max(boxMax.y, pos.y), max(boxMax.z, pos.z));
}

void ExecuteSimulationTask(in SimulationTaskSettings settings, uint transformIndex) {
	const mat4 frustrumTransform = settings.frustrum * FC_Transform(settings, transformIndex);
	const vec3 boundsMin = FC_BoundsMin(settings, transformIndex);
	const vec3 boundsMax = FC_BoundsMax(settings, transformIndex);
	vec3 boxMin = ToClipSpace(frustrumTransform, boundsMin);
	vec3 boxMax = boxMin;
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, vec3(boundsMin.x, boundsMin.y, boundsMax.z)));
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, vec3(boundsMin.x, boundsMax.y, boundsMin.z)));
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, vec3(boundsMin.x, boundsMax.y, boundsMax.z)));
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, vec3(boundsMax.x, boundsMin.y, boundsMin.z)));
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, vec3(boundsMax.x, boundsMin.y, boundsMax.z)));
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, vec3(boundsMax.x, boundsMax.y, boundsMin.z)));
	ExpandBBox(boxMin, boxMax, ToClipSpace(frustrumTransform, boundsMax));
	const bool boxOutsideOfFrustrum =
		(boxMax.x < -1.0) || (boxMin.x > 1.0) ||
		(boxMax.y < -1.0) || (boxMin.y > 1.0) ||
		(boxMax.z < 0.0) || (boxMin.z > 1.0);
	segmentTreeBuffer.values[gl_GlobalInvocationID.x] = boxOutsideOfFrustrum ? 0 : 1;
}


#define COMBINED_SIMULATION_KERNEL_BINDING_SET 1
#define COMBINED_SIMULATION_KERNEL_BINDING 1
#include "../../../GraphicsSimulation/CombinedGraphicsSimulationKernel_Body.glh"

