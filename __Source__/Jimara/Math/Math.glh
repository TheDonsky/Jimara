#ifndef JIMARA_MATH_GLH
#define JIMARA_MATH_GLH

const float PI = 3.14159265359;

mat4 Jimara_MatrixFromEulerAngles(in vec3 eulerAngles) {
	const float radX = eulerAngles.x * (PI / 180.0);
	const float radY = eulerAngles.y * (PI / 180.0);
	const float radZ = eulerAngles.z * (PI / 180.0);
	const float cosY = cos(radY);
	const float sinY = sin(radY);
	const float cosX = cos(radX);
	const float sinX = sin(radX);
	const float cosZ = cos(radZ);
	const float sinZ = sin(radZ);
	mat4 matrix;
	matrix[0] = vec4(
		cosY * cosZ + sinY * sinX * sinZ,
		sinZ * cosX,
		 -sinY * cosZ + cosY * sinX * sinZ,
		 0.0);
	matrix[1] = vec4(
		-cosY * sinZ + sinY * sinX * cosZ,
		cosZ * cosX,
		sinZ * sinY + cosY * sinX * cosZ,
		0.0);
	matrix[2] = vec4(
		sinY * cosX,
		-sinX,
		cosY * cosX, 
		0.0);
	matrix[3] = vec4(0.0, 0.0, 0.0, 1.0);
	return matrix;
}

mat4 Jimara_TransformMatrix(in vec3 position, in vec3 eulerAngles, in vec3 scale) {
	mat4 matrix = Jimara_MatrixFromEulerAngles(eulerAngles);
	matrix[0] *= scale.x;
	matrix[1] *= scale.y;
	matrix[2] *= scale.z;
	matrix[3] = vec4(position, 1.0);
	return matrix;
}

float Luminocity(in vec3 color) { 
	return dot(color, vec3(0.2126, 0.7152, 0.0722));
}

vec3 FresnelSchlick(float cosTheta, vec3 color) {
	return color + (1.0 - color) * pow(1.0 - cosTheta, 5.0);
}

vec3 Jimara_SrgbToLinear(in vec3 srgb) { 
	return pow(srgb, vec3(1 / 2.2)); 
}

vec3 Jimara_LinearToSrgb(in vec3 linear) {
	return pow(linear, vec3(2.2));
}

float Jimara_SrgbToLinear(in float srgb) { 
	return pow(srgb, 1 / 2.2); 
}

float Jimara_LinearToSrgb(in float linear) {
	return pow(linear, 2.2);
}

#endif
