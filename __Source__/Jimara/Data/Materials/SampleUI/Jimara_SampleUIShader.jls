// Expose Editor name and discription:
#pragma JM_MaterialPath(name = "Sample UI", path = "Jimara/Sample UI", hint = "Sample shader for UI renderers");

// We blend as alpha-blended:
#pragma JM_BlendMode JM_Blend_Alpha

// Flags:
#pragma JM_MaterialFlags JM_UseVertexColor

// Settings:
#pragma JM_MaterialProperty(alias = "Main Texture", hint = "Base color texture") sampler2D mainTexture;

// Fragment shader input:
struct Jimara_FragmentInput {
	vec3 position;
	vec3 normal;
	vec2 uv;
	vec4 color;
};

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex input:
layout(location = 0) in vec3 vertPosition;
layout(location = 1) in vec3 vertNormal;
layout(location = 2) in vec2 vertUV;

// Instance input:
layout(location = 3) in mat4 localTransform;
layout(location = 7) in vec4 vertexColor;

Jimara_FragmentInput Jimara_CalculateFragmentInput() {
	vec4 position = localTransform * vec4(vertPosition, 1.0f);
	Jimara_FragmentInput fragment;
	fragment.position = (position).xyz;
	fragment.normal = (localTransform * vec4(vertNormal, 0.0f)).xyz;
	fragment.uv = vertUV;
	fragment.color = vertexColor;
	return fragment;
}


#else
/** ########################################### FRAGMENT SHADER: ########################################### */
#ifdef JIMARA_FRAGMENT_SHADER

// Texture sampler:
layout(set = MATERIAL_BINDING_SET_ID, binding = 0) uniform sampler2D mainTexture;

// Gbuffer:
struct Jimara_GeometryBuffer {
	vec3 position;
	vec3 normal;
	float roughness;
	vec4 pixelColor;
};

Jimara_GeometryBuffer Jimara_BuildGeometryBuffer(in Jimara_FragmentInput fragment) {
	return Jimara_GeometryBuffer(
		fragment.position, 
		normalize(fragment.normal), 
		1.0,
		texture(mainTexture, fragment.uv) * fragment.color);
}

void Jimara_IlluminateFragment(in Photon photon, inout Jimara_GeometryBuffer gbuffer) {}

#endif
#endif
