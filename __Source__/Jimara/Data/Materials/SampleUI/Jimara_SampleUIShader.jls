// Expose Editor name and discription:
#pragma JM_MaterialPath(name = "Sample UI", path = "Jimara/Sample UI", hint = "Sample shader for UI renderers");

// We blend as alpha-blended:
#pragma JM_BlendMode JM_Blend_Alpha

// Flags:
#pragma JM_MaterialFlags JM_UseVertexColor

// Settings:
#pragma JM_MaterialProperty(alias = "Main Texture", hint = "Base color texture") sampler2D mainTexture;

// Fragment input: 
#pragma JM_FragmentField vec3 normal;
#pragma JM_FragmentField vec2 uv;
#pragma JM_FragmentField vec4 color;

#ifdef JM_ShaderStage

struct JM_ShadingState {
	vec3 normal;
	float roughness;
	vec4 color;
};

#pragma JM_ShadingStateSize 32;

JM_FragmentData JM_EvaluateVertex(in const JM_VertexInput vertexInput, in const JM_MaterialProperties materialProperties) {
	JM_FragmentData fragment;
	fragment.JM_Position = (vertexInput.transform * vec4(vertexInput.position, 1.0)).xyz;
	fragment.normal = (vertexInput.transform * vec4(vertexInput.normal, 0.0)).xyz;
	fragment.uv = vertexInput.uv;
	fragment.color = vertexInput.vertexColor;
	return fragment;
}

bool JM_Init(in const JM_FragmentData fragmentInput, in const JM_MaterialProperties materialProperties, out JM_ShadingState state) {
	state.normal = normalize(fragmentInput.normal);
	state.roughness = 1.0;
	state.color = texture(materialProperties.mainTexture, fragmentInput.uv) * fragmentInput.color;
	return true;
}

float JM_Opacity(inout JM_ShadingState state) {
	return state.color.a;
}

vec3 JM_Emission(inout JM_ShadingState state, in const vec3 viewDelta) {
	return state.color.rgb;
}

vec3 JM_EvaluateBrdf(inout JM_ShadingState state, in const JM_BrdfQuery query) {
	return vec3(0.0, 0.0, 0.0);
}

bool JM_RequestBounceSample(inout JM_ShadingState state, in const vec3 viewDelta, out JM_BounceSample requestedSample) {
	return false;
}

#else

// Fragment shader input:
struct Jimara_FragmentInput {
	vec3 position;
	vec3 normal;
	vec2 uv;
	vec4 color;
};

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex input:
layout(location = 0) in vec3 vertPosition;
layout(location = 1) in vec3 vertNormal;
layout(location = 2) in vec2 vertUV;

// Instance input:
layout(location = 3) in mat4 localTransform;
layout(location = 7) in vec4 vertexColor;

Jimara_FragmentInput Jimara_CalculateFragmentInput() {
	vec4 position = localTransform * vec4(vertPosition, 1.0f);
	Jimara_FragmentInput fragment;
	fragment.position = (position).xyz;
	fragment.normal = (localTransform * vec4(vertNormal, 0.0f)).xyz;
	fragment.uv = vertUV;
	fragment.color = vertexColor;
	return fragment;
}


#else
/** ########################################### FRAGMENT SHADER: ########################################### */
#ifdef JIMARA_FRAGMENT_SHADER

// Texture sampler:
layout(set = MATERIAL_BINDING_SET_ID, binding = 0) uniform sampler2D mainTexture;

// Gbuffer:
struct Jimara_GeometryBuffer {
	vec3 position;
	vec3 normal;
	float roughness;
	vec4 pixelColor;
};

Jimara_GeometryBuffer Jimara_BuildGeometryBuffer(in Jimara_FragmentInput fragment) {
	return Jimara_GeometryBuffer(
		fragment.position, 
		normalize(fragment.normal), 
		1.0,
		texture(mainTexture, fragment.uv) * fragment.color);
}

void Jimara_IlluminateFragment(in Photon photon, inout Jimara_GeometryBuffer gbuffer) {}

#endif
#endif
#endif
