#include "../NormalMap.glh"

// Expose Editor name and discription:
#pragma JM_MaterialPath(name = "Sample Diffuse", path = "Jimara/Sample Diffuse", hint = "Simple diffuse shader, serving as a concrete example of API usage");

// Sample material is opaque; refer to the JLS_Template.jls.sample for further details about available options;
#pragma JM_BlendMode JM_Blend_Opaque

// We only need tangents from optional features for normal map support; refer to the JLS_Template.jls.sample for further details about available options;
#pragma JM_MaterialFlags JM_UseTangents

// Parameters:
#pragma JM_MaterialProperty vec3 baseColor;
#pragma JM_MaterialProperty sampler2D colorTexture;
#pragma JM_MaterialProperty sampler2D normalMap;

// Fragment data:
#pragma JM_FragmentField vec3 normal;
#pragma JM_FragmentField vec2 uv;
#pragma JM_FragmentField vec3 tangent;
#pragma JM_FragmentField vec3 bitangent;

struct JM_ShadingState {
	vec3 position;
	vec3 normal;
	float roughness;
	vec3 color;
};

#pragma JM_ShadingStateSize 48;

#ifdef JM_ShaderStage

JM_FragmentData JM_EvaluateVertex(in const JM_VertexInput vertexInput, in const JM_MaterialProperties materialProperties) {
	JM_FragmentData fragment;
	fragment.JM_Position = (vertexInput.transform * vec4(vertexInput.position, 1.0)).xyz;
	fragment.normal = (vertexInput.transform * vec4(vertexInput.normal, 0.0)).xyz;
	fragment.tangent = (vertexInput.transform * vec4(vertexInput.tangent, 0.0)).xyz;
	fragment.bitangent = (vertexInput.transform * vec4(vertexInput.bitangent, 0.0)).xyz;
	fragment.uv = vertexInput.uv;
	return fragment;
}

bool JM_Init(in const JM_FragmentData fragmentInput, in const JM_MaterialProperties materialProperties, out JM_ShadingState state) {
	state.position = fragmentInput.JM_Position;
	state.normal = Jimara_SampleNormalMap_Linear(
		materialProperties.normalMap, 
		Jimara_TangentSpaceTransform(fragmentInput.tangent, fragmentInput.bitangent, fragmentInput.normal), 
		fragmentInput.uv);
	state.roughness = 1.0,
	state.color = texture(materialProperties.colorTexture, fragmentInput.uv).rgb * materialProperties.baseColor;
	return true;
}

vec3 JM_Emission(inout JM_ShadingState state, in const vec3 viewDelta) {
	return vec3(0.0, 0.0, 0.0);
}

vec3 JM_EvaluateBrdf(inout JM_ShadingState state, in const JM_BrdfQuery query) {
	vec3 direction = normalize(query.lightDirection);
	float tangent = max(dot(direction, state.normal), 0.0);
	return tangent * state.color * query.color;
}

bool JM_RequestBounceSample(inout JM_ShadingState state, in const vec3 viewDelta, out JM_BounceSample requestedSample) {
	return false; // No reflections for sample material...
}

#endif

// Fragment shader input:
struct Jimara_FragmentInput {
	vec3 position;
	vec3 normal;
	vec2 uv;
};

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex input:
layout(location = 0) in vec3 vertPosition;
layout(location = 1) in vec3 vertNormal;
layout(location = 2) in vec2 vertUV;

// Instance input:
layout(location = 3) in mat4 localTransform;

Jimara_FragmentInput Jimara_CalculateFragmentInput() {
	vec4 position = localTransform * vec4(vertPosition, 1.0f);
	Jimara_FragmentInput fragment;
	fragment.position = (position).xyz;
	fragment.normal = (localTransform * vec4(vertNormal, 0.0f)).xyz;
	fragment.uv = vertUV;
	return fragment;
}


#else
/** ########################################### FRAGMENT SHADER: ########################################### */
#ifdef JIMARA_FRAGMENT_SHADER
#include "../NormalMapWithDerivs.glh"

// Texture sampler:
layout(set = MATERIAL_BINDING_SET_ID, binding = 0) uniform BaseColor {
	vec3 value;
} baseColor;
layout(set = MATERIAL_BINDING_SET_ID, binding = 1) uniform sampler2D texSampler;
layout(set = MATERIAL_BINDING_SET_ID, binding = 2) uniform sampler2D normalMap;

// Gbuffer:
struct Jimara_GeometryBuffer {
	vec3 position;
	vec3 normal;
	float roughness;
	vec3 color;
	vec4 pixelColor;
};

Jimara_GeometryBuffer Jimara_BuildGeometryBuffer(in Jimara_FragmentInput fragment) {
	return Jimara_GeometryBuffer(
		fragment.position, 
		Jimara_SampleNormalMap_Linear(normalMap, fragment.normal, fragment.position, fragment.uv),
		1.0,
		texture(texSampler, fragment.uv).rgb * baseColor.value,
		vec4(0.0, 0.0, 0.0, 1.0));
}

void Jimara_IlluminateFragment(in Photon photon, inout Jimara_GeometryBuffer gbuffer) {
	vec3 direction = normalize(photon.origin - gbuffer.position);
	float tangent = max(dot(direction, gbuffer.normal), 0.0);
	gbuffer.pixelColor.rgb += tangent * gbuffer.color * photon.color;
}

#define JIMARA_OPAQUE_LIT_SHADER

#endif
#endif
