#include "PBR.glh"
#include "../NormalMap.glh"

// Normal map is treated as a direct normal
#define JIMARA_PBR_SHADER_NORMAL_MODE_CLASSIC 0

// If the incoming light direction is too "far away" from the eye direction, normal will move towards the geometric normal
#define JIMARA_PBR_SHADER_NORMAL_MODE_ADJUSTED 1

// Two microfacets will be used to simulate a 'V-shape' cuts
#define JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS 2

// Default normal mode
#ifndef JIMARA_PBR_SHADER_NORMAL_MODE
#define JIMARA_PBR_SHADER_NORMAL_MODE JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
#endif

// If normal mode is JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS, we can have some flags for backface checking or self-occlusion
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS

#define JIMARA_PBR_SHADER_MICROFACETS_FLAG_SMOOTH_CHECK_SIDE 1
#define JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION 2

#ifndef JIMARA_PBR_SHADER_MICROFACETS_FLAGS
#define JIMARA_PBR_SHADER_MICROFACETS_FLAGS (0 \
	/*| JIMARA_PBR_SHADER_MICROFACETS_FLAG_SMOOTH_CHECK_SIDE /**/ \
	| JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION /**/ \
	)
#endif

#define JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(MICROFACET_FLAG) ((JIMARA_PBR_SHADER_MICROFACETS_FLAGS & MICROFACET_FLAG) != 0)
#endif

// Blending mode:
#ifndef Jimara_PBR_Shader_EnableTransparency
#pragma JM_BlendMode JM_Blend_Opaque
#else
#pragma JM_BlendMode JM_Blend_Alpha
#endif

// Flags:
#ifndef Jimara_PBR_Shader_UseAlphaThreshold
#pragma JM_MaterialFlags JM_UseTangents
#else
#pragma JM_MaterialFlags (JM_CanDiscard | JM_UseTangents)
#endif

// Settings
#ifndef Jimara_PBR_Shader_EnableTransparency
#pragma JM_MaterialProperty(alias = "Base Color", hint = "Main color of the material", default = { 1.0f, 1.0f, 1.0f }, color = true) vec3 albedo;
#else
#pragma JM_MaterialProperty(alias = "Base Color", hint = "Main color of the material", default = { 1.0f, 1.0f, 1.0f, 1.0f }, color = true) vec4 albedo;
#endif
#pragma JM_MaterialProperty(alias = "Albedo", hint = "Base color texture") sampler2D baseColor;
#pragma JM_MaterialProperty(alias = "Normal Map", hint = "Tangent space normal map", default = { 0.5f, 0.5f, 1.0f, 1.0f }) sampler2D normalMap;
#pragma JM_MaterialProperty(alias = "Emission Color", hint = "Emission color", color = true) vec3 emission;
#pragma JM_MaterialProperty(alias = "Emission Map", hint = "Emission color map") sampler2D emissionMap;
#pragma JM_MaterialProperty(alias = "Metalness", hint = "Tells if the material is metallic or dielectric", range = { 0.0, 1.0 }) float metalness;
#pragma JM_MaterialProperty(alias = "Metalness Map", \
	hint = "Only R channel will be used for metalness; you can compress memory by storing RGB as metalness, roughness and occlusion, respectively") \
	sampler2D metalnessMap;
#pragma JM_MaterialProperty(alias = "Roughness", hint = "Tells how rough the material surface is", range = { 0.0, 1.0 }) float roughness;
#pragma JM_MaterialProperty(alias = "Roughness Map", \
	hint = "Only G channel will be used for roughness; you can compress memory by storing RGB as metalness, roughness and occlusion, respectively") \
	sampler2D roughnessMap;
#pragma JM_MaterialProperty(alias = "Occlusion Map", \
	hint = "Only B channel will be used for occlusion; you can compress memory by storing RGB as metalness, roughness and occlusion, respectively") \
	sampler2D occlusionMap;
#ifdef Jimara_PBR_Shader_UseAlphaThreshold
#pragma JM_MaterialProperty(alias = "Alpha threshold", hint = "Fragments with alpha less than this will be discarded", range = { 0.0, 1.0 }) float alphaThreshold;
#endif
#pragma JM_MaterialProperty(alias = "Tiling", hint = "Texture UV tiling", default = { 1.0f, 1.0f }) vec2 tiling;
#pragma JM_MaterialProperty(alias = "Offset", hint = "Texture UV offset") vec2 offset;

// Fragment shader input:
#pragma JM_FragmentField vec3 normal;
#pragma JM_FragmentField vec3 tangent;
#pragma JM_FragmentField vec3 bitangent;
#pragma JM_FragmentField vec2 uv;

// Shading state:
struct JM_ShadingState {
	vec3 position;
	vec3 normal;
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_CLASSIC
#elif JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_ADJUSTED
	vec3 physicalNormal;
#elif JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
	float normalWeight;
	vec3 sideDir;
	float sideWeight;
#if JIMARA_PBR_SHADER_MICROFACETS_FLAGS != 0
	vec3 physicalNormal;
#if JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION)
	float microfacetTangent;
#endif
#endif
#endif
	vec3 albedo;
	float occlusion;
	vec3 emission;
#ifdef Jimara_PBR_Shader_EnableTransparency
	float opacity;
#endif
	float metalness;
	float roughness;
};

// TODO: Make this measurement accurate!
#pragma JM_ShadingStateSize 128;


JM_FragmentData JM_EvaluateVertex(in const JM_VertexInput vertexInput, in const JM_MaterialProperties materialProperties) {
	JM_FragmentData fragment;
	fragment.JM_Position = (vertexInput.transform * vec4(vertexInput.position, 1.0)).xyz;
	fragment.normal = (vertexInput.transform * vec4(vertexInput.normal, 0.0)).xyz;
	fragment.tangent = (vertexInput.transform * vec4(vertexInput.tangent, 0.0)).xyz;
	fragment.bitangent = (vertexInput.transform * vec4(vertexInput.bitangent, 0.0)).xyz;
	fragment.uv = vertexInput.uv * materialProperties.tiling + materialProperties.offset;
	return fragment;
}

bool JM_Init(in const JM_FragmentData fragmentInput, in const JM_MaterialProperties materialProperties, out JM_ShadingState state) {
	const vec4 albedoTexel = texture(materialProperties.baseColor, fragmentInput.uv);
	const vec4 albedo = albedoTexel *
#ifndef Jimara_PBR_Shader_EnableTransparency
		vec4(materialProperties.albedo, 1.0);
#else
		materialProperties.albedo;
#endif
	
	#ifdef Jimara_PBR_Shader_UseAlphaThreshold
	if (albedo.a < materialProperties.alphaThreshold)
		return false;
	#endif
	
	const float fragmentAlpha = 
	#ifdef Jimara_PBR_Shader_EnableTransparency
		albedo.a;
	state.opacity = fragmentAlpha;
	#else
		1.0;
	#endif

	const vec3 normal = Jimara_CalculateTangentSpaceNormal(
		texture(materialProperties.normalMap, fragmentInput.uv).xyz, 
		Jimara_TangentSpaceTransform(fragmentInput.tangent, fragmentInput.bitangent, fragmentInput.normal));
	
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
	const vec3 physicalNormal = normalize(fragmentInput.normal);
	const vec3 sideVec = (normal - physicalNormal * dot(normal, physicalNormal));
	const float sine = length(sideVec);
	state.normalWeight = 1.0 / (1.0 + sine);
	state.sideWeight = 1.0 - state.normalWeight;
#endif

	state.position = fragmentInput.JM_Position;
	state.normal = normal;
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_CLASSIC
#elif JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_ADJUSTED
	state.physicalNormal = normalize(fragmentInput.normal);
#elif JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
	state.sideDir = (sine > 0.00000001) ? (sideVec / (-sine)) : normal;
#if JIMARA_PBR_SHADER_MICROFACETS_FLAGS != 0
	state.physicalNormal = physicalNormal;
#if JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION)
	state.microfacetTangent = state.sideWeight / max(sqrt(1.0 - state.sideWeight * state.sideWeight), 0.0000001);
#endif
#endif
#endif
	state.albedo = albedo.rgb,
	state.metalness = materialProperties.metalness * texture(materialProperties.metalnessMap, fragmentInput.uv).r,
	state.roughness = materialProperties.roughness * texture(materialProperties.roughnessMap, fragmentInput.uv).g,
	state.occlusion = texture(materialProperties.occlusionMap, fragmentInput.uv).b;
	state.emission = materialProperties.emission * texture(materialProperties.emissionMap, fragmentInput.uv).rgb;
	return true;
}

#if JM_BlendMode != JM_Blend_Opaque
float JM_Opacity(inout JM_ShadingState state) {
	return state.opacity;
}
#endif

vec3 JM_Emission(inout JM_ShadingState state, in const vec3 viewDelta) {
	return state.emission;
}

vec3 JM_EvaluateBrdf(inout JM_ShadingState state, JM_BrdfQuery query) {
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_CLASSIC
	const vec3 normal = state.normal;

#elif JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_ADJUSTED
	const vec3 normal = mix(state.physicalNormal, state.normal,
		clamp(dot(normalize(query.lightDirection), state.physicalNormal), 0.0, 1.0));

#elif JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
#if JIMARA_PBR_SHADER_MICROFACETS_FLAGS != 0
	const vec3 lightDir = -normalize(query.lightDirection);
	const float physCos = dot(lightDir, state.physicalNormal);
#endif

#if JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(JIMARA_PBR_SHADER_MICROFACETS_FLAG_SMOOTH_CHECK_SIDE)
	const float colorScale = min(mix(physCos * -8.0, 1.0, (state.normalWeight - 0.5) * 2.0), 1.0);
	if (colorScale < 0.0)
		return vec3(0.0, 0.0, 0.0);
	query.color *= colorScale;
#endif

#if JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION)
	const float lightTangent = max(-physCos / max(abs(dot(state.sideDir, lightDir)), 0.0000001), 0.0);
	const bool isHorizontal = (state.microfacetTangent < 0.00001 || abs(physCos) > 0.999999);
	const float normalVisibility = 
		isHorizontal ? 1.0 :
		lightTangent / (lightTangent + state.microfacetTangent);
	const float rightVisibility =
		isHorizontal ? 0.0 :
		lightTangent / max(lightTangent, state.microfacetTangent);
	if ((normalVisibility + rightVisibility) <= 0.00001)
		return vec3(0.0, 0.0, 0.0);
#endif

#endif

	Jimara_PBR_Fragment frag = Jimara_PBR_Fragment(
		state.position, 
		state.normal,
		state.albedo,
		state.metalness,
		state.roughness);

	vec3 result = state.occlusion * 	
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
		state.normalWeight *
#if JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION)
		normalVisibility *
#endif
#endif
		Jimara_PBR_BRDF(frag, query);
	
#if JIMARA_PBR_SHADER_NORMAL_MODE == JIMARA_PBR_SHADER_NORMAL_MODE_MICROFACETS
	frag.normal = state.sideDir;
	result += state.occlusion * state.sideWeight * 
#if JIMARA_PBR_SHADER_MICROFACETS_HAS_FLAG(JIMARA_PBR_SHADER_MICROFACETS_FLAG_SELF_OCCLUSION)
		rightVisibility *
#endif
		Jimara_PBR_BRDF(frag, query);
#endif

	return result;
}

bool JM_RequestBounceSample(inout JM_ShadingState state, in const vec3 viewDelta, out JM_BounceSample requestedSample) {
	Jimara_PBR_Fragment frag = Jimara_PBR_Fragment(
		state.position, 
		state.normal,
		state.albedo,
		state.metalness,
		state.roughness);
	return Jimara_PBR_RequestBounceSample(frag, viewDelta, requestedSample);
}
