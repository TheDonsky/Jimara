
#ifndef JIMARA_PBR_HEADER
#define JIMARA_PBR_HEADER
#include "../../../Math/Math.glh"
/* PBR implementation "heavily inspired" by tutorial from https://learnopengl.com/PBR/Theory */


/// <summary>
/// PBR Fragment descriptor
/// </summary>
struct Jimara_PBR_Fragment {
	/// <summary> World-space position of the fragment </summary>
	vec3 position;
	
	/// <summary> World-space normal of the fragment </summary>
	vec3 normal;
	
	/// <summary> Albedo/Base color </summary>
	vec3 albedo;
	
	/// <summary> 'Metalness' value ([0 - 1] range) </summary>
	float metalness;
	
	/// <summary> Surface roughness ([0 - 1] range) </summary>
	float roughness;
};

/// <summary> sizeof(Jimara_PBR_Fragment) + padding </summary>
#define Jimara_PBR_Fragment_Size 64


/// <summary>
/// Calculates bidirectional reflective distribution function of a single photon cast on a PBR fragment
/// </summary>
/// <param name="fragment"> PBR Fragment descriptor </param>
/// <param name="photon"> Incoming photon </param>
/// <param name="viewPosition"> Viewport/Camera position </param>
/// <returns> BRDF Evaluation </returns>
vec3 Jimara_PBR_BRDF(in const Jimara_PBR_Fragment fragment, in const Photon photon, in const vec3 viewPosition) {
	// Calculate light & camera directions, alongside their mid-dir
	const vec3 lightDirection = normalize(photon.origin - fragment.position);
	const vec3 viewDirection = normalize(viewPosition - fragment.position);
	const vec3 halfWayDir = normalize(lightDirection + viewDirection);
	const vec3 normal = normalize(fragment.normal);

	// Clamped cosines:
	const float lightCosine = max(dot(normal, lightDirection), 0.0);
	const float viewCosine = max(dot(normal, viewDirection), 0.0);
	const float halfWayCosine = max(dot(normal, halfWayDir), 0.0);
	
	// Common variables:
	const vec3 f0 = mix(vec3(0.04), fragment.albedo, fragment.metalness);
	#define Jimara_PBR_FresnelSchlick_ROUGHNESS (f0 + (max(vec3(1.0 - fragment.roughness), f0) - f0) * pow(1.0 - viewCosine, 5.0))

	// Special cases for the IBL.... (Let us trust compiler optimizations to simplify the code for special cases)
	if (photon.type == Photon_Type_DiffuseIrradiance) {
		return min(1.0 - Jimara_PBR_FresnelSchlick_ROUGHNESS, 1.0) * photon.color * fragment.albedo;
	}
	else if (photon.type == Photon_Type_SpecularIrradiance) {
		const vec2 envBRDF = texture(jimara_BindlessTextures[nonuniformEXT(Jimara_BRDF_IntegrationMapId)],
			vec2(viewCosine, fragment.roughness)).rg;
		return photon.color * min(Jimara_PBR_FresnelSchlick_ROUGHNESS * envBRDF.x + envBRDF.y, 1.0);
	}
	#undef Jimara_PBR_FresnelSchlick_ROUGHNESS

	// Normal distribution function:
	float ndf;
	{
		const float roughnessSQR = max(fragment.roughness * fragment.roughness, 0.00001);
		const float roughnessNDF = roughnessSQR * roughnessSQR;
		const float divSqrt = halfWayCosine * halfWayCosine * (roughnessNDF - 1.0) + 1.0;
		ndf = roughnessNDF / (divSqrt * divSqrt /* * PI*/);
	}

	// Geometry function:
	float g;
	{
		const float roughnessPlus1 = fragment.roughness + 1.0;
		const float remappedRoughness = (roughnessPlus1 * roughnessPlus1) * 0.125;
		#define Jimara_PBR_DistributionGGX(cosine) cosine / (cosine * (1.0 - remappedRoughness) + remappedRoughness)
		g = Jimara_PBR_DistributionGGX(lightCosine) * Jimara_PBR_DistributionGGX(viewCosine);
		#undef Jimara_PBR_DistributionGGX
	}

	// Fresnel equasion:
	const vec3 f = FresnelSchlick(halfWayCosine, f0);

	// Split photon into specular and refracted parts:
	const vec3 specularColor = (ndf * g * f) / max(4.0 * viewCosine * lightCosine, 0.0000001);
	const vec3 refractedColor =  (1.0 - fragment.metalness) * (vec3(1.0) - f) * fragment.albedo /* / PI */;
	
	// Calculate resulting color:
	return min(refractedColor + specularColor, 1.0) * lightCosine * photon.color;
}

#ifdef JM_ShaderStage
/// <summary>
/// Calculates bidirectional reflective distribution function of a single photon cast on a PBR fragment
/// </summary>
/// <param name="fragment"> PBR Fragment descriptor </param>
/// <param name="photon"> JM_BrdfQuery </param>
/// <returns> BRDF Evaluation </returns>
vec3 Jimara_PBR_BRDF(in const Jimara_PBR_Fragment fragment, in const JM_BrdfQuery query) {
	return Jimara_PBR_BRDF(fragment, Photon(fragment.position + query.lightDirection, query.color, query.photonType), fragment.position + query.viewDelta);
}

/// <summary>
/// Makes a bounce-light request
/// </summary>
/// <param name="fragment"> PBR Fragment descriptor </param>
/// <param name="viewDelta"> Fragment-to-view direction </param>
/// <param name="requestedSample"> Requested sample data </param>
/// <returns> True, if sample was requested </returns>
bool Jimara_PBR_RequestBounceSample(in const Jimara_PBR_Fragment fragment, in const vec3 viewDelta, out JM_BounceSample requestedSample) {
	return false; // No bounce light [yet]
}
#endif


#endif
