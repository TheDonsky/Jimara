// Expose Editor name and discription:
#pragma JM_MaterialPath(name = "Sample Particle", path = "Jimara/Sample Particle", hint = "Sample shader for particle systems");

// We blend as alpha-blended:
#pragma JM_BlendMode JM_Blend_Alpha

// Flags:
#pragma JM_MaterialFlags JM_CanDiscard | JM_UseVertexColor | JM_UsePerVertexTilingAndOffset

// Settings:
#pragma JM_MaterialProperty(alias = "Base Color", hint = "Main color of the material", default = { 1.0f, 1.0f, 1.0f, 1.0f }, color) vec4 albedo;
#pragma JM_MaterialProperty(alias = "Albedo", hint = "Base color texture") sampler2D baseColor;
#pragma JM_MaterialProperty(alias = "Alpha Threshold", hint = "Minimal alpha not to discard", min = 0.0f, max = 1.0f) float alphaThreshold;

// Fragment input: 
#pragma JM_FragmentField vec3 normal;
#pragma JM_FragmentField vec2 uv;
#pragma JM_FragmentField vec4 color;

#ifdef JM_ShaderStage

struct JM_ShadingState {
	vec3 normal;
	float roughness;
	vec4 color;
};

#pragma JM_ShadingStateSize 32;

JM_FragmentData JM_EvaluateVertex(in const JM_VertexInput vertexInput, in const JM_MaterialProperties materialProperties) {
	JM_FragmentData fragment;
	fragment.JM_Position = (vertexInput.transform * vec4(vertexInput.position, 1.0)).xyz;
	fragment.normal = (vertexInput.transform * vec4(vertexInput.normal, 0.0)).xyz;
	fragment.uv = vertexInput.uv * vertexInput.tilingAndOffset.xy + vertexInput.tilingAndOffset.zw;
	fragment.color = vertexInput.vertexColor;
	return fragment;
}

bool JM_Init(in const JM_FragmentData fragmentInput, in const JM_MaterialProperties materialProperties, out JM_ShadingState state) {
	vec4 color = texture(materialProperties.baseColor, fragmentInput.uv);
	if (color.a < materialProperties.alphaThreshold) 
		return false;
	state.normal = normalize(fragmentInput.normal);
	state.roughness = 1.0;
	state.color = fragmentInput.color * color * materialProperties.albedo;
	return true;
}

float JM_Opacity(inout JM_ShadingState state) {
	return state.color.a;
}

vec3 JM_Emission(inout JM_ShadingState state, in const vec3 viewDelta) {
	return vec3(0.0, 0.0, 0.0);
}

vec3 JM_EvaluateBrdf(inout JM_ShadingState state, in const JM_BrdfQuery query) {
	return state.color.rgb * query.color;
}

bool JM_RequestBounceSample(inout JM_ShadingState state, in const vec3 viewDelta, out JM_BounceSample requestedSample) {
	return false;
}

#endif

// Fragment shader input:
struct Jimara_FragmentInput {
	vec3 position;
	vec3 normal;
	vec2 uv;
	vec4 color;
};

/** ############################################ VERTEX SHADER: ############################################ */
#ifdef JIMARA_VERTEX_SHADER

// Vertex input:
layout(location = 0) in vec3 vertPosition;
layout(location = 1) in vec3 vertNormal;
layout(location = 2) in vec2 vertUV;

// Instance input:
layout(location = 3) in mat4 localTransform;
layout(location = 7) in vec4 particleColor;
layout(location = 8) in vec4 particleTilingAndOffset;

Jimara_FragmentInput Jimara_CalculateFragmentInput() {
	vec4 position = localTransform * vec4(vertPosition, 1.0f);
	Jimara_FragmentInput fragment;
	fragment.position = (position).xyz;
	fragment.normal = (localTransform * vec4(vertNormal, 0.0f)).xyz;
	fragment.uv = vertUV * particleTilingAndOffset.xy + particleTilingAndOffset.zw;
	fragment.color = particleColor;
	return fragment;
}


#else
/** ########################################### FRAGMENT SHADER: ########################################### */
#ifdef JIMARA_FRAGMENT_SHADER

// Texture sampler:
layout(set = MATERIAL_BINDING_SET_ID, binding = 0) uniform MaterialSettings {
	vec3 baseColor;
	float alphaThreshold;
} materialSettings;
layout(set = MATERIAL_BINDING_SET_ID, binding = 1) uniform sampler2D texSampler;

// Gbuffer:
struct Jimara_GeometryBuffer {
	vec3 position;
	vec3 normal;
	float roughness;
	vec3 color;
	vec4 pixelColor;
};

Jimara_GeometryBuffer Jimara_BuildGeometryBuffer(in Jimara_FragmentInput fragment) {
	vec4 color = texture(texSampler, fragment.uv);
	if (color.a < materialSettings.alphaThreshold) discard;
	color *= fragment.color;
	return Jimara_GeometryBuffer(
		fragment.position, 
		normalize(fragment.normal),
		1.0,
		color.rgb * materialSettings.baseColor,
		vec4(0.0, 0.0, 0.0, color.a));
}

void Jimara_IlluminateFragment(in Photon photon, inout Jimara_GeometryBuffer gbuffer) {
	gbuffer.pixelColor.rgb += gbuffer.color * photon.color;
}

#endif
#endif
