#ifndef JIMARA_NORMAL_MAP_TOOLS
#define JIMARA_NORMAL_MAP_TOOLS


/// <summary> 
/// Calculates tangent space rotation matrix based on normal, position and UV 
/// <para/> Note: This uses derivatives and because of that is only usable within a fragment shader.
/// </summary>
/// <param name="normal"> Fragment geometry normal </param>
/// <param name="position"> World space position </param>
/// <param name="uv"> UV coordinate </param>
/// <returns> mat3(tangent, bitangent, normal) </returns>
mat3 Jimara_CalculateTangentSpaceTransform(in vec3 normal, in vec3 position, in vec2 uv) {
	// UV derivatives:
	const vec2 duvDx = dFdx(uv);
	const vec2 duvDy = dFdy(uv);

	// Position derivatives, aligned with normal:
	const vec3 dposDx = cross(normal, dFdy(position));
	const vec3 dposDy = cross(dFdx(position), normal);

	// Calculate raw tangents:
	const vec3 rawTangent = -(duvDx.x * dposDx + duvDy.x * dposDy);
	const vec3 rawBitangent = (duvDx.y * dposDx + duvDy.y * dposDy);

	// Return normalized tangent:
	const float tangentSqrtMagn = dot(rawTangent, rawTangent);
	const float bitangentSqrtMagn = dot(rawBitangent, rawBitangent);
	const vec3 surfaceNormal = normalize(normal);
	return mat3(
		((tangentSqrtMagn > 0) ? (rawTangent * inversesqrt(tangentSqrtMagn)) : surfaceNormal), 
		((bitangentSqrtMagn > 0) ? (rawBitangent * inversesqrt(bitangentSqrtMagn)) : surfaceNormal),
		surfaceNormal);
}


/// <summary> 
/// Calculates tangent space normal
/// <para/> Note: This uses derivatives and because of that is only usable within a fragment shader.
/// </summary>
/// <param name="normalColor"> Normal color in linear space </param>
/// <param name="normal"> Fragment geometry normal </param>
/// <param name="position"> World space position </param>
/// <param name="uv"> UV coordinate </param>
/// <returns> Tangent space normal </returns>
vec3 Jimara_CalculateTangentSpaceNormal(in vec3 normalColor, in vec3 normal, in vec3 position, in vec2 uv) {
	const mat3 tangentSpaceTransform = Jimara_CalculateTangentSpaceTransform(normal, position, uv);
	const vec3 tangentSpaceNormal = (normalColor * vec3(2.0, 2.0, 1.0) - vec3(1.0, 1.0, 0.0));
	return normalize(tangentSpaceTransform * tangentSpaceNormal);
}


/// <summary> 
/// Samples linearly encoded tangent space normal map
/// <para/> Note: This uses derivatives and because of that is only usable within a fragment shader.
/// </summary>
/// <param name="normalMap"> Normal map </param>
/// <param name="normal"> Fragment geometry normal </param>
/// <param name="position"> World space position </param>
/// <param name="uv"> UV coordinate </param>
/// <returns> Tangent space normal </returns>
vec3 Jimara_SampleNormalMap_Linear(in sampler2D normalMap, in vec3 normal, in vec3 position, in vec2 uv) {
	return Jimara_CalculateTangentSpaceNormal(texture(normalMap, uv).xyz, normal, position, uv);
}


/// <summary> 
/// Samples SRGB encoded tangent space normal map
/// <para/> Note: This uses derivatives and because of that is only usable within a fragment shader.
/// </summary>
/// <param name="normalMap"> Normal map </param>
/// <param name="normal"> Fragment geometry normal </param>
/// <param name="position"> World space position </param>
/// <param name="uv"> UV coordinate </param>
/// <returns> Tangent space normal </returns>
vec3 Jimara_SampleNormalMap_SRGB(in sampler2D normalMap, in vec3 normal, in vec3 position, in vec2 uv) {
	return Jimara_CalculateTangentSpaceNormal(pow(texture(normalMap, uv).xyz, vec3(1 / 2.2)), normal, position, uv);
}

#endif
