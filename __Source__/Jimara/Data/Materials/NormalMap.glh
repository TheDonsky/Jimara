#ifndef JIMARA_NORMAL_MAP_TOOLS
#define JIMARA_NORMAL_MAP_TOOLS
#include "../../Math/Math.glh"


/// <summary> 
/// Generates tangent-space transform
/// </summary>
/// <param name="tangent"> Tangent vector </param>
/// <param name="bitangent"> Bitangent vector </param>
/// <param name="normal"> Vertex normal </param>
/// <returns> mat3(tangent, bitangent, normal) </returns>
mat3 Jimara_TangentSpaceTransform(in vec3 tangent, in vec3 bitangent, in vec3 normal) {
	return mat3(tangent, bitangent, normal);
}

/// <summary> 
/// Calculates tangent space rotation matrix from point normal and triangle's vertex and uv coordinates
/// </summary>
/// <param name="normal"> Fragment geometry normal </param>
/// <param name="dPosA"> Arbitary offset in world-space to a point 'A' on surface (where 'A' and 'B' are different) </param>
/// <param name="dPosB"> Arbitary offset in world-space to a point 'B' on surface (where 'A' and 'B' are different) </param>
/// <param name="dTexA"> UV coordinate offset to point 'A' (where 'A' is the same as above) </param>
/// <param name="dTexB"> UV coordinate offset to point 'B' (where 'B' is the same as above) </param>
/// <returns> mat3(tangent, bitangent, normal) </returns>
mat3 Jimara_CalculateTangentSpaceTransform(in vec3 normal, vec3 dPosA, vec3 dPosB, in vec2 dTexA, in vec2 dTexB) {
	// Align with normal:
	{
		const vec3 tmp = dPosA;
		dPosA = cross(normal, dPosB);
		dPosB = cross(tmp, normal);
	}

	// Calculate raw tangents:
	const vec3 rawTangent = -(dTexA.x * dPosA + dTexB.x * dPosB);
	const vec3 rawBitangent = (dTexA.y * dPosA + dTexB.y * dPosB);

	// Return normalized tangent:
	const float tangentSqrtMagn = dot(rawTangent, rawTangent);
	const float bitangentSqrtMagn = dot(rawBitangent, rawBitangent);
	const vec3 surfaceNormal = normalize(normal);
	return mat3(
		((tangentSqrtMagn > 0) ? (rawTangent * inversesqrt(tangentSqrtMagn)) : surfaceNormal), 
		((bitangentSqrtMagn > 0) ? (rawBitangent * inversesqrt(bitangentSqrtMagn)) : surfaceNormal),
		surfaceNormal);
}

/// <summary> 
/// Calculates tangent space rotation matrix from point normal and triangle's vertex and uv coordinates
/// </summary>
/// <param name="normal"> Fragment geometry normal </param>
/// <param name="posA"> First vertex position </param>
/// <param name="posB"> Second vertex position </param>
/// <param name="posC"> Third vertex position </param>
/// <param name="uvA"> First UV coordinate </param>
/// <param name="uvB"> Second UV coordinate </param>
/// <param name="uvC"> Third UV coordinate </param>
/// <returns> mat3(tangent, bitangent, normal) </returns>
mat3 Jimara_CalculateTangentSpaceTransform(
	in vec3 normal, 
	in vec3 posA, in vec3 posB, in vec3 posC, 
	in vec2 uvA, in vec2 uvB, in vec2 uvC) {
	return Jimara_CalculateTangentSpaceTransform(normal, posB - posA, posC - posA, uvB - uvA, uvC - uvA);
}

/// <summary> 
/// Calculates tangent space normal
/// </summary>
/// <param name="normalColor"> Normal color in linear space </param>
/// <param name="tangentSpaceTransform"> mat3(tangent, bitangent, normal) </param>
/// <returns> Tangent space normal </returns>
vec3 Jimara_CalculateTangentSpaceNormal(in vec3 normalColor, in const mat3 tangentSpaceTransform) {
	const vec3 tangentSpaceNormal = (normalColor * vec3(2.0, 2.0, 1.0) - vec3(1.0, 1.0, 0.0));
	return normalize(tangentSpaceTransform * tangentSpaceNormal);
}


/// <summary> 
/// Samples linearly encoded tangent space normal map
/// </summary>
/// <param name="normalMap"> Normal map </param>
/// <param name="tangentSpaceTransform"> mat3(tangent, bitangent, normal) </param>
/// <param name="uv"> UV coordinate </param>
/// <returns> Tangent space normal </returns>
vec3 Jimara_SampleNormalMap_Linear(in sampler2D normalMap, in const mat3 tangentSpaceTransform, in vec2 uv) {
	return Jimara_CalculateTangentSpaceNormal(texture(normalMap, uv).xyz, tangentSpaceTransform);
}


/// <summary> 
/// Samples SRGB encoded tangent space normal map
/// </summary>
/// <param name="normalMap"> Normal map </param>
/// <param name="tangentSpaceTransform"> mat3(tangent, bitangent, normal) </param>
/// <param name="uv"> UV coordinate </param>
/// <returns> Tangent space normal </returns>
vec3 Jimara_SampleNormalMap_SRGB(in sampler2D normalMap, in const mat3 tangentSpaceTransform, in vec2 uv) {
	return Jimara_CalculateTangentSpaceNormal(Jimara_SrgbToLinear(texture(normalMap, uv).xyz), tangentSpaceTransform);
}

#endif
