
#pragma jimara_light_descriptor_size 128

struct Test_DirectionBasedLight_Data {
	vec3 color_Bottom_Left_Close;
	vec3 color_Bottom_Left_Far;
	vec3 color_Bottom_Right_Close;
	vec3 color_Bottom_Right_Far;
	vec3 color_Top_Left_Close;
	vec3 color_Top_Left_Far;
	vec3 color_Top_Right_Close;
	vec3 color_Top_Right_Far;
};

Photon Test_DirectionBasedLight_GetSample(in HitPoint hitPoint, in Test_DirectionBasedLight_Data lightData) {
	vec3 direction = (normalize(-hitPoint.normal) + vec3(1.0, 1.0, 1.0)) * 0.5;
	Photon photon;
	photon.origin = hitPoint.position + hitPoint.normal;
	photon.color = mix(
		mix(
			mix(lightData.color_Bottom_Left_Close, lightData.color_Bottom_Left_Far, direction.z),
			mix(lightData.color_Bottom_Right_Close, lightData.color_Bottom_Right_Far, direction.z),
			direction.x
		),
		mix(
			mix(lightData.color_Top_Left_Close, lightData.color_Top_Left_Far, direction.z),
			mix(lightData.color_Top_Right_Close, lightData.color_Top_Right_Far, direction.z),
			direction.x
		),
		direction.y
	);
	return photon;
}

#define Test_DirectionBasedLight_GetSamples(TDB_hitPoint, TDB_lightData, TDB_recordSample) \
	{ Photon TDB_photon = Test_DirectionBasedLight_GetSample(TDB_hitPoint, TDB_lightData); TDB_recordSample(TDB_photon); }
