
#ifdef JIMARA_VERTEX_SHADER
layout(set = MODEL_BINDING_SET_ID, binding = MODEL_BINDING_START_ID) buffer Camera {
	mat4 cameraTransform;
} camera;

mat4 Jimara_CameraTransform() {
	return camera.cameraTransform;
}
#endif

#ifdef JIMARA_FRAGMENT_SHADER
layout(std430, set = MODEL_BINDING_SET_ID, binding = (MODEL_BINDING_START_ID + 1)) buffer LightTypeIds { 
	uint lightTypeIds[]; 
};

layout(location = 0) out vec4 outColor;

void main() {
	vec3 color = vec3(0.0);
	Jimara_GeometryBuffer gbuffer = Jimara_BuildGeometryBuffer();
	HitPoint hit;
	hit.position = gbuffer.position;
	hit.normal = gbuffer.normal;
	for (uint i = 0; i < lightTypeIds.length(); i++) {
		uint typeId = lightTypeIds[i];
		Photon photons[MAX_PER_LIGHT_SAMPLES];
		uint photonCount = Jimara_GetLightSamples(i, typeId, hit, photons);
		for (uint j = 0; j < photonCount; j++)
			color += Jimara_IlluminateFragment(photons[i], gbuffer);
	}
	outColor = vec4(clamp(color, 0.0, 1.0), 1.0);
}
#endif
