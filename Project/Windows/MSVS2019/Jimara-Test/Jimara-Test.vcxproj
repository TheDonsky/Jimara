<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{aa0415cd-6e1b-4ecb-a4de-4e8ab3d48f3e}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
    <ConfigurationType>Application</ConfigurationType>
    <PlatformToolset>v142</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings" />
  <ImportGroup Label="Shared" />
  <ImportGroup Label="PropertySheets" />
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <OutDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara-Test\$(Platform)\$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <OutDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara-Test\$(Platform)\$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <OutDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara-Test\$(Platform)\$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <OutDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara-Test\$(Platform)\$(Configuration)\</OutDir>
    <IntDir>$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\$(Platform)\$(Configuration)\</IntDir>
  </PropertyGroup>
  <ItemGroup>
    <ProjectReference Include="..\Jimara\Jimara.vcxproj">
      <Project>{fbaf5d7f-3d27-4a32-8da8-e7075e6d4847}</Project>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <None Include="packages.config" />
    <None Include="__SRC__\Graphics\TriangleRenderer\TriangleRenderer.frag" />
    <None Include="__SRC__\Graphics\TriangleRenderer\TriangleRenderer.vert" />
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="__SRC__\Components\Audio\AudioAPITest.cpp" />
    <ClCompile Include="__SRC__\Components\Audio\AudioComponentTest.cpp" />
    <ClCompile Include="__SRC__\Components\GraphicsObjects\CameraSettingsTest.cpp" />
    <ClCompile Include="__SRC__\Components\GraphicsObjects\MeshRendererTest.cpp" />
    <ClCompile Include="__SRC__\Components\GraphicsObjects\SkinnedMeshRendererTest.cpp" />
    <ClCompile Include="__SRC__\Components\Physics\PhysicsQueryTest.cpp" />
    <ClCompile Include="__SRC__\Components\Physics\PhysicsSimulationTest.cpp" />
    <ClCompile Include="__SRC__\Components\TestEnvironment\TestEnvironment.cpp" />
    <ClCompile Include="__SRC__\Components\TransformTest.cpp" />
    <ClCompile Include="__SRC__\Core\ActionQueueTest.cpp" />
    <ClCompile Include="__SRC__\Core\EventTest.cpp" />
    <ClCompile Include="__SRC__\Core\FunctionTest.cpp" />
    <ClCompile Include="__SRC__\Core\JobSystemTest.cpp" />
    <ClCompile Include="__SRC__\Core\ObjectTest.cpp" />
    <ClCompile Include="__SRC__\Core\GeometryQueryTest.cpp" />
    <ClCompile Include="__SRC__\Core\PropertyTest.cpp" />
    <ClCompile Include="__SRC__\Core\ReferenceTest.cpp" />
    <ClCompile Include="__SRC__\Core\StacktorTest.cpp" />
    <ClCompile Include="__SRC__\Core\StopwatchTest.cpp" />
    <ClCompile Include="__SRC__\Data\ComponentHeirarchySerializerTest.cpp" />
    <ClCompile Include="__SRC__\Data\FBXTest.cpp" />
    <ClCompile Include="__SRC__\Data\FileSystemDatabaseTest.cpp" />
    <ClCompile Include="__SRC__\Data\MeshGenerationTest.cpp" />
    <ClCompile Include="__SRC__\Data\OBJTest.cpp" />
    <ClCompile Include="__SRC__\Data\SerializationMacroTest.cpp" />
    <ClCompile Include="__SRC__\Data\SerializedActionTest.cpp" />
    <ClCompile Include="__SRC__\Data\SerializeToJsonTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Algorithms\BitonicSortTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Algorithms\GraphicsRNGTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Algorithms\SegmentTreeGenerationKernelTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Atomics\GraphicsAtomicsTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Bindless\BindlessTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Compute\ComputePipelineTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\ObjectIdRendererTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\RayTracing\RayTracingAPITest.cpp" />
    <ClCompile Include="__SRC__\Graphics\ShaderBinaries\SPIRV_BinaryTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\TriangleRenderer\TriangleRenderer.cpp" />
    <ClCompile Include="__SRC__\Graphics\Vulkan\VulkanInstanceTest.cpp" />
    <ClCompile Include="__SRC__\Graphics\Vulkan\VulkanRenderingTest.cpp" />
    <ClCompile Include="__SRC__\Math\PolygonTriangulationTest.cpp" />
    <ClCompile Include="__SRC__\Memory.cpp" />
    <ClCompile Include="__SRC__\OS\ClipboardTest.cpp" />
    <ClCompile Include="__SRC__\OS\DynamicLibraryTest.cpp" />
    <ClCompile Include="__SRC__\OS\FileSystemTest.cpp" />
    <ClCompile Include="__SRC__\OS\GLFW_WindowTest.cpp" />
    <ClCompile Include="__SRC__\OS\InputEnumTest.cpp" />
    <ClCompile Include="__SRC__\OS\LoggerTest.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="__SRC__\Components\TestEnvironment\TestEnvironment.h" />
    <ClInclude Include="__SRC__\CountingLogger.h" />
    <ClInclude Include="__SRC__\Graphics\TestEnvironmentCreation.h" />
    <ClInclude Include="__SRC__\Graphics\TriangleRenderer\TriangleRenderer.h" />
    <ClInclude Include="__SRC__\GtestHeaders.h" />
    <ClInclude Include="__SRC__\Memory.h" />
  </ItemGroup>
  <ItemDefinitionGroup />
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="..\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.7\build\native\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.targets" Condition="Exists('..\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.7\build\native\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.targets')" />
    <Import Project="..\packages\zlib_static.1.2.11.12\build\native\zlib_static.targets" Condition="Exists('..\packages\zlib_static.1.2.11.12\build\native\zlib_static.targets')" />
  </ImportGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>
      </PrecompiledHeaderFile>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <AdditionalIncludeDirectories>$(VULKAN_SDK)\Include;$(ProjectDir)..\Jimara\__SRC__;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glm;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\physx\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\pxshared\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\OpenAl\openal-soft\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\json\single_include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glfw\glfw-3.3.8.bin.WIN32\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions2</EnableEnhancedInstructionSet>
      <FloatingPointModel>Fast</FloatingPointModel>
    </ClCompile>
    <Link>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Console</SubSystem>
      <AdditionalLibraryDirectories>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)\</AdditionalLibraryDirectories>
      <AdditionalDependencies>Jimara.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalOptions>/ignore:4099 %(AdditionalOptions)</AdditionalOptions>
    </Link>
    <ProjectReference>
      <UseLibraryDependencyInputs>true</UseLibraryDependencyInputs>
      <LinkLibraryDependencies>true</LinkLibraryDependencies>
    </ProjectReference>
    <PreBuildEvent>
      <Command>set jimara_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara"
set test_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara-Tests"
set shader_intermediate_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\GLSL\$(Configuration)\$(Platform)\LitShaders"
set shader_output_dir="$(OutDir)Shaders"
python "$(SolutionDir)..\..\..\__Scripts__\jimara_build_shaders.py"  %jimara_src_dir% %test_src_dir% -id %shader_intermediate_dir% -o %shader_output_dir%


set jimara_dir="$(SolutionDir)..\..\.."
set source_dir="%jimara_dir%\__Source__"
set engine_build_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)"
set engine_lib=%engine_build_dir%\Jimara.lib
if $(Configuration) == Debug (
set compile_as_dll=/LDd
set set_runtime_lib=/MDd
) ELSE (
set compile_as_dll=/LD
set set_runtime_lib=/MD
)
set cl_compiler_flags=/std:c++17 /EHsc %set_runtime_lib% %compile_as_dll%
copy %engine_build_dir%\Jimara.dll "$(OutDir)Jimara.dll"


copy %engine_build_dir%\glfw3.dll "$(OutDir)glfw3.dll"
copy %engine_build_dir%\OpenAL32.dll "$(OutDir)OpenAL32.dll"
cl.exe %source_dir%\Test-DLL-Files\TestDLL_A.cpp %cl_compiler_flags% /Fe:$(OutDir)TestDLL_A &amp;&amp; rm TestDLL_A.obj
cl.exe %source_dir%\Test-DLL-Files\TestDLL_B.cpp %cl_compiler_flags% /I %source_dir% /I "%jimara_dir%"\Jimara-ThirdParty\glm /Fe:$(OutDir)TestDLL_B %engine_lib% &amp;&amp; del TestDLL_B.obj
</Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>
      </PrecompiledHeaderFile>
      <Optimization>Disabled</Optimization>
      <PreprocessorDefinitions>X64;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <RuntimeLibrary>MultiThreadedDebugDLL</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <AdditionalIncludeDirectories>$(VULKAN_SDK)\Include;$(ProjectDir)..\Jimara\__SRC__;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glm;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\physx\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\pxshared\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\OpenAl\openal-soft\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\json\single_include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glfw\glfw-3.3.8.bin.WIN64\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions2</EnableEnhancedInstructionSet>
      <FloatingPointModel>Fast</FloatingPointModel>
    </ClCompile>
    <Link>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Console</SubSystem>
      <AdditionalLibraryDirectories>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)\</AdditionalLibraryDirectories>
      <AdditionalDependencies>Jimara.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalOptions>/ignore:4099 %(AdditionalOptions)</AdditionalOptions>
    </Link>
    <ProjectReference>
      <UseLibraryDependencyInputs>true</UseLibraryDependencyInputs>
      <LinkLibraryDependencies>true</LinkLibraryDependencies>
    </ProjectReference>
    <PreBuildEvent>
      <Command>set jimara_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara"
set test_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara-Tests"
set shader_intermediate_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\GLSL\$(Configuration)\$(Platform)\LitShaders"
set shader_output_dir="$(OutDir)Shaders"
python "$(SolutionDir)..\..\..\__Scripts__\jimara_build_shaders.py"  %jimara_src_dir% %test_src_dir% -id %shader_intermediate_dir% -o %shader_output_dir%


set jimara_dir="$(SolutionDir)..\..\.."
set source_dir="%jimara_dir%\__Source__"
set engine_build_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)"
set engine_lib=%engine_build_dir%\Jimara.lib
if $(Configuration) == Debug (
set compile_as_dll=/LDd
set set_runtime_lib=/MDd
) ELSE (
set compile_as_dll=/LD
set set_runtime_lib=/MD
)
set cl_compiler_flags=/std:c++17 /EHsc %set_runtime_lib% %compile_as_dll%
copy %engine_build_dir%\Jimara.dll "$(OutDir)Jimara.dll"


copy %engine_build_dir%\glfw3.dll "$(OutDir)glfw3.dll"
copy %engine_build_dir%\OpenAL32.dll "$(OutDir)OpenAL32.dll"
cl.exe %source_dir%\Test-DLL-Files\TestDLL_A.cpp %cl_compiler_flags% /Fe:$(OutDir)TestDLL_A &amp;&amp; rm TestDLL_A.obj
cl.exe %source_dir%\Test-DLL-Files\TestDLL_B.cpp %cl_compiler_flags% /I %source_dir% /I "%jimara_dir%"\Jimara-ThirdParty\glm /Fe:$(OutDir)TestDLL_B %engine_lib% &amp;&amp; del TestDLL_B.obj
</Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>
      </PrecompiledHeaderFile>
      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <AdditionalIncludeDirectories>$(VULKAN_SDK)\Include;$(ProjectDir)..\Jimara\__SRC__;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glm;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\physx\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\pxshared\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\OpenAl\openal-soft\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\json\single_include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glfw\glfw-3.3.8.bin.WIN32\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions2</EnableEnhancedInstructionSet>
      <FloatingPointModel>Fast</FloatingPointModel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <Link>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Console</SubSystem>
      <OptimizeReferences>true</OptimizeReferences>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <AdditionalLibraryDirectories>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)\</AdditionalLibraryDirectories>
      <AdditionalDependencies>Jimara.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalOptions>/ignore:4099 %(AdditionalOptions)</AdditionalOptions>
    </Link>
    <ProjectReference>
      <UseLibraryDependencyInputs>true</UseLibraryDependencyInputs>
      <LinkLibraryDependencies>true</LinkLibraryDependencies>
    </ProjectReference>
    <PreBuildEvent>
      <Command>set jimara_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara"
set test_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara-Tests"
set shader_intermediate_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\GLSL\$(Configuration)\$(Platform)\LitShaders"
set shader_output_dir="$(OutDir)Shaders"
python "$(SolutionDir)..\..\..\__Scripts__\jimara_build_shaders.py"  %jimara_src_dir% %test_src_dir% -id %shader_intermediate_dir% -o %shader_output_dir%


set jimara_dir="$(SolutionDir)..\..\.."
set source_dir="%jimara_dir%\__Source__"
set engine_build_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)"
set engine_lib=%engine_build_dir%\Jimara.lib
if $(Configuration) == Debug (
set compile_as_dll=/LDd
set set_runtime_lib=/MDd
) ELSE (
set compile_as_dll=/LD
set set_runtime_lib=/MD
)
set cl_compiler_flags=/std:c++17 /EHsc %set_runtime_lib% %compile_as_dll%
copy %engine_build_dir%\Jimara.dll "$(OutDir)Jimara.dll"


copy %engine_build_dir%\glfw3.dll "$(OutDir)glfw3.dll"
copy %engine_build_dir%\OpenAL32.dll "$(OutDir)OpenAL32.dll"
cl.exe %source_dir%\Test-DLL-Files\TestDLL_A.cpp %cl_compiler_flags% /Fe:$(OutDir)TestDLL_A &amp;&amp; rm TestDLL_A.obj
cl.exe %source_dir%\Test-DLL-Files\TestDLL_B.cpp %cl_compiler_flags% /I %source_dir% /I "%jimara_dir%"\Jimara-ThirdParty\glm /Fe:$(OutDir)TestDLL_B %engine_lib% &amp;&amp; del TestDLL_B.obj
</Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <PrecompiledHeaderFile>
      </PrecompiledHeaderFile>
      <PreprocessorDefinitions>X64;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <WarningLevel>Level3</WarningLevel>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <LanguageStandard>stdcpp17</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <AdditionalIncludeDirectories>$(VULKAN_SDK)\Include;$(ProjectDir)..\Jimara\__SRC__;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glm;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\physx\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\NVIDIA\PhysX\PhysX\pxshared\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\OpenAl\openal-soft\include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\json\single_include;$(ProjectDir)..\..\..\..\Jimara-ThirdParty\glfw\glfw-3.3.8.bin.WIN64\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions2</EnableEnhancedInstructionSet>
      <FloatingPointModel>Fast</FloatingPointModel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
    </ClCompile>
    <Link>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <SubSystem>Console</SubSystem>
      <OptimizeReferences>true</OptimizeReferences>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <AdditionalLibraryDirectories>$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)\</AdditionalLibraryDirectories>
      <AdditionalDependencies>Jimara.lib;%(AdditionalDependencies)</AdditionalDependencies>
      <AdditionalOptions>/ignore:4099 %(AdditionalOptions)</AdditionalOptions>
    </Link>
    <ProjectReference>
      <UseLibraryDependencyInputs>true</UseLibraryDependencyInputs>
      <LinkLibraryDependencies>true</LinkLibraryDependencies>
    </ProjectReference>
    <PreBuildEvent>
      <Command>set jimara_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara"
set test_src_dir="$(SolutionDir)..\..\..\__Source__\Jimara-Tests"
set shader_intermediate_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Intermediate\Jimara-Test\GLSL\$(Configuration)\$(Platform)\LitShaders"
set shader_output_dir="$(OutDir)Shaders"
python "$(SolutionDir)..\..\..\__Scripts__\jimara_build_shaders.py"  %jimara_src_dir% %test_src_dir% -id %shader_intermediate_dir% -o %shader_output_dir%


set jimara_dir="$(SolutionDir)..\..\.."
set source_dir="%jimara_dir%\__Source__"
set engine_build_dir="$(SolutionDir)..\..\..\__BUILD__\Windows\Jimara\$(Platform)\$(Configuration)"
set engine_lib=%engine_build_dir%\Jimara.lib
if $(Configuration) == Debug (
set compile_as_dll=/LDd
set set_runtime_lib=/MDd
) ELSE (
set compile_as_dll=/LD
set set_runtime_lib=/MD
)
set cl_compiler_flags=/std:c++17 /EHsc %set_runtime_lib% %compile_as_dll%
copy %engine_build_dir%\Jimara.dll "$(OutDir)Jimara.dll"


copy %engine_build_dir%\glfw3.dll "$(OutDir)glfw3.dll"
copy %engine_build_dir%\OpenAL32.dll "$(OutDir)OpenAL32.dll"
cl.exe %source_dir%\Test-DLL-Files\TestDLL_A.cpp %cl_compiler_flags% /Fe:$(OutDir)TestDLL_A &amp;&amp; rm TestDLL_A.obj
cl.exe %source_dir%\Test-DLL-Files\TestDLL_B.cpp %cl_compiler_flags% /I %source_dir% /I "%jimara_dir%"\Jimara-ThirdParty\glm /Fe:$(OutDir)TestDLL_B %engine_lib% &amp;&amp; del TestDLL_B.obj
</Command>
    </PreBuildEvent>
    <PostBuildEvent>
      <Command>
      </Command>
    </PostBuildEvent>
  </ItemDefinitionGroup>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>This project references NuGet package(s) that are missing on this computer. Use NuGet Package Restore to download them.  For more information, see http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.7\build\native\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.1.8.1.7\build\native\Microsoft.googletest.v140.windesktop.msvcstl.static.rt-dyn.targets'))" />
    <Error Condition="!Exists('..\packages\zlib_static.1.2.11.12\build\native\zlib_static.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\zlib_static.1.2.11.12\build\native\zlib_static.targets'))" />
  </Target>
</Project>